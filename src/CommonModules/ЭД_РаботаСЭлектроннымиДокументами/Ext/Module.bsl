Процедура ИнициализироватьТаблицыКэша_Старая(КэшЗначений, КэшАналитик) Экспорт
	
	КэшЗначений = Новый ТаблицаЗначений;
	КэшАналитик = Новый ТаблицаЗначений;
	
	КЧ = Новый КвалификаторыЧисла(24,7);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_ЗначенияАналитик"));
	ОписаниеЗначения = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Показатели"));
	ОписаниеПоказателя = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭД_ЭлектронныйДокумент"));
	ОписаниеЭД = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭД_Версия"));
	ОписаниеВерсии = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Аналитики"));
	ОписаниеАналитики = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_ЗначенияАналитик"));
	ОписаниеЗначенияАналитики = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Строки"));
	ОписаниеСтрокиЭД = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеАналитикаПоказателя = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	
	КэшЗначений.Колонки.Добавить("СтрокаЭД", 			ОписаниеСтрокиЭД);
	КэшЗначений.Колонки.Добавить("Показатель", 			ОписаниеПоказателя);
	КэшЗначений.Колонки.Добавить("НомерСтрокиДанных", 	ОписаниеЧисло);
	КэшЗначений.Колонки.Добавить("ЭлектронныйДокумент", ОписаниеЭД);
	КэшЗначений.Колонки.Добавить("Версия", 				ОписаниеВерсии);
	КэшЗначений.Колонки.Добавить("ЗначениеПоказателя", 	ОписаниеЧисло);
	
	КэшАналитик.Колонки.Добавить("СтрокаЭД", 			ОписаниеСтрокиЭД);
	КэшАналитик.Колонки.Добавить("Показатель", 			ОписаниеПоказателя);
	КэшАналитик.Колонки.Добавить("НомерСтрокиДанных", 	ОписаниеЧисло);
	КэшАналитик.Колонки.Добавить("ЭлектронныйДокумент", ОписаниеЭД);
	КэшАналитик.Колонки.Добавить("Версия", 				ОписаниеВерсии);
	КэшАналитик.Колонки.Добавить("Аналитика", 			ОписаниеАналитики);
	КэшАналитик.Колонки.Добавить("ЗначениеАналитики", 	ОписаниеЗначенияАналитики);
	КэшАналитик.Колонки.Добавить("АналитикаПоказателя", ОписаниеАналитикаПоказателя);
	КэшАналитик.Колонки.Добавить("ИспользованиеАналитики", ОписаниеЧисло);
	
	
КонецПроцедуры

Функция ИнициализироватьТаблицыКэша(МодельЭД,ЭтоНовый = Ложь) Экспорт
	
	//	СтруктураКэша = Новый Структура;
	СтруктураКэша = Новый Соответствие;
	
	КЧ = Новый КвалификаторыЧисла(24,7);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_ЗначенияАналитик"));
	ОписаниеЗначения = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	КЧ10 = Новый КвалификаторыЧисла(10,0);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеЧисло10 = Новый ОписаниеТипов(МассивТипов,КЧ10);
	
	///___мкском___Козлов Иван Витальевич___2020/08/07___№№.№№___1 Добавлено поле "ТипЗначения"
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_Строки.Ссылка КАК Ссылка,
	|	ЭД_Строки.Код КАК КодСтроки
	|ИЗ
	|	Справочник.ЭД_Строки КАК ЭД_Строки
	|ГДЕ
	|	ЭД_Строки.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭД_Показатели.Ссылка КАК Ссылка,
	|	ЭД_Показатели.Код КАК КодПоказателя,
	|	ЭД_Показатели.СтрокаЭД КАК СтрокаЭД,
	|	ЭД_Показатели.КолонкаЭД.Наименование КАК НаименованиеКолонки,
	|	ЭД_Показатели.КолонкаЭД.Длина КАК Длина,
	|	ЭД_Показатели.КолонкаЭД.Точность КАК Точность,
	|	ЭД_Показатели.КолонкаЭД.ТипЗначения КАК ТипЗначения,
	|	ЭД_Показатели.КолонкаЭД.ДлинаСтроки КАК ДлинаСтроки
	|ИЗ
	|	Справочник.ЭД_Показатели КАК ЭД_Показатели
	|ГДЕ
	|	ЭД_Показатели.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭД_Показатели.КолонкаЭД.КодСортировки";
	
	Запрос.УстановитьПараметр("Владелец", МодельЭД);
	Результаты = Запрос.ВыполнитьПакет();
	
	Строки		= Результаты[0].Выгрузить();
	Показатели  = Результаты[1].Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_СтрокиАналитики.Ссылка КАК Ссылка,
	|	ЭД_СтрокиАналитики.Аналитика КАК Аналитика,
	|	ЭД_СтрокиАналитики.Аналитика.Наименование КАК АналитикаНаименование
	|ИЗ
	|	Справочник.ЭД_Строки.Аналитики КАК ЭД_СтрокиАналитики
	|ГДЕ
	|	ЭД_СтрокиАналитики.Ссылка В (&мСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЭД_СтрокиАналитики.НомерСтроки";
	
	Запрос.УстановитьПараметр("мСтроки", Строки.ВыгрузитьКолонку("Ссылка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	тзАналитики = РезультатЗапроса.Выгрузить();    	
	
	//Рустамова
	Если МодельЭД.ЗаполнениеВАналитике и ЭтоНовый Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭД_МодельСтрокиОтчета.ЗначенияАналитик КАК ЗначенияАналитик
		|ИЗ
		|	Справочник.ЭД_Модель.СтрокиОтчета КАК ЭД_МодельСтрокиОтчета
		|ГДЕ
		|	ЭД_МодельСтрокиОтчета.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", МодельЭД);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		МассивАналитик = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивАналитик.Добавить(ВыборкаДетальныеЗаписи.ЗначенияАналитик);
		КонецЦикла;
		
		
	КонецЕсли;
	
	//
	Для Каждого Строка Из Строки Цикл
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		
		ТаблицаДанных.Колонки.Добавить("НомерСтрокиДанных", ОписаниеЧисло10, "Номер строки данных");
		
		//Сначала добавим колонки самих аналитик
		СтрокиАналитики = тзАналитики.НайтиСтроки(Новый Структура("Ссылка", Строка.Ссылка));
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			
			ТаблицаДанных.Колонки.Добавить(СтрЗаменить(СтрокаАналитики.Аналитика.Код, " ",""), ОписаниеЗначения, СокрЛП(СтрокаАналитики.АналитикаНаименование));
			
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("СтрокаЭД", Строка.Ссылка);
		
		СтрокиПоказателей = Показатели.НайтиСтроки(Отбор);
		
		Для Каждого СтрокиПоказатели Из СтрокиПоказателей Цикл
			
			///___мкском___Козлов Иван Витальевич___2020/08/07___Начало___№№.№№__1
			///было
			//КЧ = Новый КвалификаторыЧисла(СтрокиПоказатели.Длина, СтрокиПоказатели.Точность);
			//
			//МассивТипов.Очистить();
			//МассивТипов.Добавить(Тип("Число"));
			//ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);
			//
			//ТаблицаДанных.Колонки.Добавить(СтрокиПоказатели.КодПоказателя, ОписаниеЧисло, СокрЛП(СтрокиПоказатели.НаименованиеКолонки));
			///стало 	
			ОписаниеТипа = ПолучитьОписаниеТипаПоКолонкеЭД(СтрокиПоказатели);		
			ТаблицаДанных.Колонки.Добавить(СтрокиПоказатели.КодПоказателя, ОписаниеТипа, СокрЛП(СтрокиПоказатели.НаименованиеКолонки));
			///___мкском___Козлов Иван Витальевич___2020/08/07___Окончание___					
		КонецЦикла;   		
		
		Если МассивАналитик<>Неопределено Тогда 
			для числострок = 1 по МассивАналитик.Количество() цикл
				НоваяСтрока = ТаблицаДанных.Добавить();
				Для Каждого СтрокиПоказатели Из СтрокиПоказателей Цикл
					НоваяСтрока[СтрокиПоказатели.КодПоказателя] = 0.0000001;
				КонецЦикла;

			КонецЦикла;
			
			ТаблицаДанных.ЗагрузитьКолонку(МассивАналитик,СтрЗаменить(СтрокаАналитики.Аналитика.Код, " ",""));//Рустамова
		КонецЕсли;	
		
		//		СтруктураКэша.Вставить("ГР" + СокрЛП(Строка.КодСтроки), ТаблицаДанных);	  		
		СтруктураКэша.Вставить(Строка.Ссылка, ТаблицаДанных);	  		
		
	КонецЦикла;
	
	Возврат СтруктураКэша;
	
КонецФункции

Процедура ДополнитьДанныеПоказателейДаннымиКэша(ДанныеПоказателей, ЭлементыТекущегоОтчета, СтруктураКэша)
	
	Для Каждого Элемент Из ЭлементыТекущегоОтчета Цикл
		
		ТаблицаКэша = СтруктураКэша["ГР"+СокрЛП(Элемент.Источник.СтрокаЭД.Код)];
		
		Для Каждого Строка Из ТаблицаКэша Цикл
			
			Аналитики = Элемент.Источник.СтрокаЭД.Аналитики;
			
			Для Каждого ТекАналитика Из Аналитики Цикл
				НоваяСтрока = ДанныеПоказателей.Добавить();
				НоваяСтрока.Показатель 			= Элемент.Источник;
				НоваяСтрока.Аналитика 			= ТекАналитика.Аналитика;
				НоваяСтрока.ЗначениеАналитики 	= Строка[СокрЛП(ТекАналитика.Аналитика.Код)];
				НоваяСтрока.ЗначениеПоказателя 	= Строка[СокрЛП(Элемент.Источник.Код)];
				НоваяСтрока.НомерСтрокиДанных 	= Строка.НомерСтрокиДанных;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиОтборВТаблицеОтборов(ТаблицаОтборов, Отборы)
	
	//	ЕстьОтбор = Ложь;    	
	
	Для Каждого стр Из ТаблицаОтборов Цикл
		
		Если стр.Отборы.Количество() <> Отборы.Количество() Тогда
			Продолжить;
		КонецЕсли;	 			
		
		ОтборыРавны = Истина;
		
		Для Каждого отб1 Из стр.Отборы Цикл
			
			АналитикаЕсть = Ложь;
			
			Для Каждого отб2 Из Отборы Цикл
				
				Если отб1.Аналитика = отб2.Аналитика Тогда
					АналитикаЕсть = Истина;
					Если отб1.СпособОтбораАналитики = отб2.СпособОтбораАналитики Тогда
						
						Если ТипЗнч(отб1.ЗначениеАналитики) = Тип("СписокЗначений") И ТипЗнч(отб2.ЗначениеАналитики) = Тип("СписокЗначений") И  
							ЭД_ОбщегоНазначения.СравнитьСпискиЗначений(отб1.ЗначениеАналитики, отб2.ЗначениеАналитики) Тогда  							
						Иначе	
							ОтборыРавны = Ложь;
							Прервать;
						КонецЕсли;	    						
					Иначе
						ОтборыРавны = Ложь;
						Прервать;
						
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
			
			Если Не АналитикаЕсть Тогда
				ОтборыРавны = Ложь;
			КонецЕсли;	
			
			Если Не ОтборыРавны Тогда
				Прервать;
			КонецЕсли;	        			
			
		КонецЦикла;	
		
		Если ОтборыРавны Тогда
			Возврат стр;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПреобразоватьТаблицуОперандов(ТаблицаПоказателей)
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Показатели");
	ТаблицаОтборов.Колонки.Добавить("Источники");
	ТаблицаОтборов.Колонки.Добавить("Отборы");
	
	//	// Найдем все уникальные аналитики в элементах настройки:
	//	мКолонкиАналитик = Новый Массив;
	//	Для Каждого Строка Из ТаблицаПоказателей Цикл
	//		
	//		Если Строка.ЭлементНастройки.ИсточникИзТекущегоОтчета = Истина Тогда
	//			Продолжить;
	//		КонецЕсли;	
	//		
	//		Для Каждого Отб Из Строка.ЭлементНастройки.ОтборыДанных Цикл
	//			Если мКолонкиАналитик.Найти(Отб.Аналитика) = Неопределено Тогда
	//				мКолонкиАналитик.Добавить(Отб.Аналитика);
	//			КонецЕсли;                                            
	//		КонецЦикла;	
	//	КонецЦикла;
	//	
	//	Для Каждого Колонка Из мКолонкиАналитик Цикл
	//		
	////		ТаблицаОтборов.Колонки.Добавить(Колонка.НаименованиеРеквизита, 							Новый ОписаниеТипов("СправочникСсылка.ЭД_Аналитики"));
	//		ТаблицаОтборов.Колонки.Добавить(Колонка.НаименованиеРеквизита + "_СпособОтбора", 		Новый ОписаниеТипов("ПеречислениеСсылка.ЭД_СпособыОтбораАналитик"));
	//		ТаблицаОтборов.Колонки.Добавить(Колонка.НаименованиеРеквизита + "_ЗначениеАналитики");
	//		
	//	КонецЦикла;	
	
	
	Для Каждого Строка Из ТаблицаПоказателей Цикл
		
		Если Строка.ЭлементНастройки.ИсточникИзТекущегоОтчета = Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		//		СтрОтбор = Новый Структура;
		тзОтборы = Новый ТаблицаЗначений;
		тзОтборы.Колонки.Добавить("Аналитика");
		тзОтборы.Колонки.Добавить("СпособОтбораАналитики");
		тзОтборы.Колонки.Добавить("ЗначениеАналитики");
		
		Для Каждого Отб Из Строка.ЭлементНастройки.ОтборыДанных Цикл
			
			//КолонкаОтборНаименование 	= Отб.Аналитика.НаименованиеРеквизита + "_СпособОтбора";
			//КолонкаЗначениеНаименование = Отб.Аналитика.НаименованиеРеквизита + "_ЗначениеАналитики";
			//
			//СтрОтбор.Вставить(КолонкаОтборНаименование, 	Отб.СпособОтбораАналитики);
			//
			//ЗначениеАналитики = Отб.ЗначениеАналитики.Получить();
			//СтрОтбор.Вставить(КолонкаЗначениеНаименование, 	ЗначениеАналитики);
			
			НС = тзОтборы.Добавить();
			НС.Аналитика 				= Отб.Аналитика;
			НС.СпособОтбораАналитики 	= Отб.СпособОтбораАналитики;
			НС.ЗначениеАналитики		= Отб.ЗначениеАналитики.Получить(); 
			
		КонецЦикла;	
		
		СтрокаТаблицыОтборов = НайтиОтборВТаблицеОтборов(ТаблицаОтборов, тзОтборы);
		
		Если СтрокаТаблицыОтборов = Неопределено Тогда
			мПоказ = Новый Массив;
			мПоказ.Добавить(Строка.Показатель);
			
			мИсточ = Новый Массив;
			мИсточ.Добавить(Строка.Источник);
			
			НС = ТаблицаОтборов.Добавить();
			НС.Показатели 		= мПоказ;
			НС.Источники 		= мИсточ;
			НС.Отборы 			= тзОтборы;
		Иначе	
			Если СтрокаТаблицыОтборов.Показатели.Найти(Строка.Показатель) = Неопределено Тогда
				СтрокаТаблицыОтборов.Показатели.Добавить(Строка.Показатель);
			КонецЕсли;
			Если СтрокаТаблицыОтборов.Источники.Найти(Строка.Источник) = Неопределено Тогда
				СтрокаТаблицыОтборов.Источники.Добавить(Строка.Источник);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	
	Возврат ТаблицаОтборов;
	
КонецФункции	

Процедура ЗаполнитьЭлектронныйДокумент(СпособЗаполнения, СтруктураКэша, ЭлектронныйДокумент, ТаблицаРеквизитов) Экспорт
	
	//Готовим вспомогательные данные для расчета
	НастройкаРасчета = ЭлектронныйДокумент.НастройкаРасчета;
	ТаблицаПорядкаРасчетаПоказателей = ПолучитьПорядокВычисленияПоказателей(НастройкаРасчета, ЭлектронныйДокумент.МодельЭД);	
	
	Если СпособЗаполнения = Перечисления.ЭД_СпособыЗаполненияЭлектронныхДокументов.ПоНастройкеРасчета Тогда
		
		Если НастройкаРасчета.ОчищатьПередРасчетом Тогда
			Для Каждого СтрокаКэша Из СтруктураКэша Цикл
				СтрокаКэша.Значение.Очистить();
			КонецЦикла;	
		КонецЕсли;	
		
		//		Если ТипЗнч(СтруктураКэша) = Тип("Структура") И ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		//		Если ТипЗнч(СтруктураКэша) = Тип("Структура") Тогда
		Если ТипЗнч(СтруктураКэша) = Тип("Соответствие") Тогда
			
			СтруктураДанныхНастройки = ПолучитьСтруктуруДанных(НастройкаРасчета);
			Если СтруктураДанныхНастройки = Неопределено Тогда
				Возврат;
			КонецЕсли;	
			
			//ТаблицаОперандов = ПреобразоватьТаблицуОперандов(СтруктураДанныхНастройки.ТаблицаПоказателей);
			
			Для Каждого Строка Из ТаблицаПорядкаРасчетаПоказателей Цикл
				
				
				Если Не ДанныеДляРасчетаКорректны(Строка) Тогда 
					Продолжить; 
				КонецЕсли;
				
				ЗаполняемыйПоказатель 	= Строка.Показатель;
				СтрокаЭД				= ЗаполняемыйПоказатель.СтрокаЭД;
				КодСтрокиЭД 			= СокрЛП(ЗаполняемыйПоказатель.СтрокаЭД.Код);
				
				ТаблицаКэша 		= Новый ТаблицаЗначений;
				
				МассивПоказателей 	= Новый Массив;
				МассивАналитик 		= Новый Массив;
				
				//				ТаблицаКэша = СтруктураКэша["ГР" + КодСтрокиЭД];
				ТаблицаКэша = СтруктураКэша[СтрокаЭД];
				ТаблицаКэша.ЗаполнитьЗначения(0, СокрЛП(ЗаполняемыйПоказатель.Код));
				
				ЗаполнитьМассивыПоказателейИАналитик(МассивПоказателей, МассивАналитик, ТаблицаКэша);			
					
				// Получение данных:
				
				Если Строка.СпособОбработки = Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение Тогда
					ДанныеИсточников = ПолучитьТаблицуИсточниковЗаполняемые(Строка.МассивЭлементовНастройки, ЗаполняемыйПоказатель, НастройкаРасчета, ЭлектронныйДокумент, ТаблицаРеквизитов);
				Иначе
					ДанныеИсточников = ПолучитьТаблицуИсточниковВычисляемые(Строка.МассивЭлементовНастройки, ЗаполняемыйПоказатель, НастройкаРасчета, ЭлектронныйДокумент, ТаблицаРеквизитов, СтруктураКэша);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДанныеИсточников) Тогда 
					Продолжить; 
				КонецЕсли;
				
				ТекПроцедура = СтрЗаменить(Строка.Процедура, "[", "ТекСтрока.");
				ТекПроцедура = СтрЗаменить(ТекПроцедура, "]", "");
				
				ОшибкиПриВычислении = Ложь;
				
				РассчитатьПоказатель(Строка, ДанныеИсточников, ТаблицаКэша, ТекПроцедура, ОшибкиПриВычислении);
				
				Если ОшибкиПриВычислении Тогда
					Сообщить("Не удалось рассчитать значение показателя [" + ЗаполняемыйПоказатель.Код + "] " + ЗаполняемыйПоказатель, СтатусСообщения.Важное);
				КонецЕсли;	
				
				ЗакончитьРасчетПоказателя(МассивПоказателей, МассивАналитик, ТаблицаКэша, СтрокаЭД);
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли СпособЗаполнения = Перечисления.ЭД_СпособыЗаполненияЭлектронныхДокументов.Вычислить Тогда
		
		Для Каждого Строка Из ТаблицаПорядкаРасчетаПоказателей Цикл
			
			Если Не ДанныеДляРасчетаКорректны(Строка) Тогда 
				Продолжить; 
			КонецЕсли;
			Если Строка.СпособОбработки = Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение Тогда
				Продолжить;	
			КонецЕсли;
			
			ЗаполняемыйПоказатель 	= Строка.Показатель;
			СтрокаЭД				= ЗаполняемыйПоказатель.СтрокаЭД;
			КодСтрокиЭД 			= СокрЛП(ЗаполняемыйПоказатель.СтрокаЭД.Код);
			
			ТаблицаКэша 		= Новый ТаблицаЗначений;
			
			МассивПоказателей 	= Новый Массив;
			МассивАналитик 		= Новый Массив;
			
			ТаблицаКэша = СтруктураКэша[СтрокаЭД];
			ТаблицаКэша.ЗаполнитьЗначения(0, СокрЛП(ЗаполняемыйПоказатель.Код));
			
			ЗаполнитьМассивыПоказателейИАналитик(МассивПоказателей, МассивАналитик, ТаблицаКэша);			
			
			ДанныеИсточников = ПолучитьТаблицуИсточниковВычисляемые(Строка.МассивЭлементовНастройки, ЗаполняемыйПоказатель, НастройкаРасчета, ЭлектронныйДокумент, ТаблицаРеквизитов, СтруктураКэша);
			
			Если Не ЗначениеЗаполнено(ДанныеИсточников) Тогда 
				Продолжить; 
			КонецЕсли;
			
			ТекПроцедура = СтрЗаменить(Строка.Процедура, "[", "ТекСтрока.");
			ТекПроцедура = СтрЗаменить(ТекПроцедура, "]", "");
			
			ОшибкиПриВычислении = Ложь;
			
			РассчитатьПоказатель(Строка, ДанныеИсточников, ТаблицаКэша, ТекПроцедура, ОшибкиПриВычислении);
			
			Если ОшибкиПриВычислении Тогда
				Сообщить("Не удалось рассчитать значение показателя [" + ЗаполняемыйПоказатель.Код + "] " + ЗаполняемыйПоказатель, СтатусСообщения.Важное);
			КонецЕсли;	
			
			ЗакончитьРасчетПоказателя(МассивПоказателей, МассивАналитик, ТаблицаКэша, СтрокаЭД);
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивыПоказателейИАналитик(МассивПоказателей, МассивАналитик, ТаблицаКэша)Экспорт
	Для Каждого Колонка Из ТаблицаКэша.Колонки Цикл
		Если Колонка.Имя = "НомерСтрокиДанных" Тогда 
			Продолжить; 
		КонецЕсли;
		
		///___мкском___Козлов Иван Витальевич___2020/08/10___Начало___№№.№№__1
		///было
		//Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		//	МассивПоказателей.Добавить(Колонка.Имя);
		//ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЭД_ЗначенияАналитик")) Тогда
		//	МассивАналитик.Добавить(Колонка.Имя);
		//КонецЕсли;
		
		///стало. По новой методологии теперь есть несколько типов 
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЭД_ЗначенияАналитик")) Тогда
			МассивАналитик.Добавить(Колонка.Имя);	
		Иначе
			МассивПоказателей.Добавить(Колонка.Имя);
		КонецЕсли; 	
		///___мкском___Козлов Иван Витальевич___2020/08/10___Окончание___ 
	КонецЦикла;
КонецПроцедуры

Процедура ЗакончитьРасчетПоказателя(МассивПоказателей, МассивАналитик, ТаблицаКэша, СтрокаЭД)Экспорт
	СтрокаПоказателей = "";
	Сч = 0;
	Для Каждого КолонкаПоказателя Из МассивПоказателей Цикл
		Сч = Сч + 1;
		СтрокаПоказателей = СтрокаПоказателей + КолонкаПоказателя + ?(Сч=МассивПоказателей.Количество(),"", ",");							
	КонецЦикла;
	
	СтрокаАналитик = "";
	Сч = 0;
	Для Каждого КолонкаАналитики Из МассивАналитик Цикл
		Сч = Сч + 1;
		СтрокаАналитик = СтрокаАналитик + КолонкаАналитики + ?(Сч=МассивАналитик.Количество(),"", ",");
	КонецЦикла;
	
	//СтруктураКэша["ГР"+КодСтрокиЭД] = СвернутьИтоговуюТаблицуСтроки(ТаблицаКэша, МассивПоказателей, МассивАналитик); 
	СвернутьИтоговуюТаблицуСтроки(ТаблицаКэша, МассивПоказателей, МассивАналитик); 
	//СтруктураКэша["ГР"+КодСтрокиЭД] = ТаблицаКэша; 
	
	НомерСтроки = 1;
	//Для Каждого стр Из СтруктураКэша["ГР"+КодСтрокиЭД] Цикл
	Для Каждого стр Из ТаблицаКэша Цикл
		стр.НомерСтрокиДанных = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;				
	КонецЦикла;	
КонецПроцедуры

Процедура РассчитатьПоказатель(СтрокаПоказателя, ДанныеИсточников, ТаблицаКэша, ТекПроцедура, ОшибкиПриВычислении)
	
	Для Каждого ТекСтрока Из ДанныеИсточников Цикл
		
		ИмяКолонки = СокрЛП(СтрокаПоказателя.Код);
		Колонка = ТаблицаКэша.Колонки.Найти(ИмяКолонки);
		ТочностьОкругления = 0;
		Если Колонка <> Неопределено Тогда
			ТочностьОкругления = Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		КонецЕсли;	
		
		ТекЗначение = 0;
		Попытка
			ТекЗначение = Вычислить(ТекПроцедура);
			//ТекЗначение = Окр(ТекЗначение, ТочностьОкругления);
		Исключение
			ОшибкиПриВычислении = Истина;
		КонецПопытки;	
		
		НоваяСтрока = ТаблицаКэша.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		НоваяСтрока[ИмяКолонки] = ТекЗначение;
		
		Для Каждого Колонка Из ТаблицаКэша.Колонки Цикл
			Если НоваяСтрока[Колонка.Имя] = Неопределено Тогда 
				НоваяСтрока[Колонка.Имя] = 0; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляРасчетаКорректны(Строка)
	
	Если Не ЗначениеЗаполнено(Строка.Процедура) ИЛИ Строка.МассивЭлементовНастройки = Неопределено Тогда 
		Возврат Ложь; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьМассивЭлементовНастройки(СписокЭлементовИсточников, НастройкаРасчета)
	
	//Определяем список элементов-источников данных
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭД_ЭлементыНастроекРасчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭД_ЭлементыНастроекРасчета КАК ЭД_ЭлементыНастроекРасчета
	|ГДЕ
	|	ЭД_ЭлементыНастроекРасчета.Владелец = &НастройкаРасчета
	|	И ЭД_ЭлементыНастроекРасчета.Код В(&КодыЭлементов)";
	Запрос.УстановитьПараметр("НастройкаРасчета", НастройкаРасчета);
	Запрос.УстановитьПараметр("КодыЭлементов", СписокЭлементовИсточников);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьСписокЭД(ТаблицаПоказателей, ЭлектронныйДокумент)
	
	РеквизитыДокумента = ЭлектронныйДокумент.РеквизитыДокумента.Выгрузить();
	
	// Определяем сначала список операндов, в которых используется отбор по параметра расчета
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_ЭлементыНастроекРасчетОтборыДанных.Аналитика КАК Реквизит,
	|	ЭД_ЭлементыНастроекРасчетОтборыДанных.ЗначениеАналитики КАК ЗначениеРеквизита
	|ИЗ
	|	Справочник.ЭД_ЭлементыНастроекРасчета.ОтборыДанных КАК ЭД_ЭлементыНастроекРасчетОтборыДанных
	|ГДЕ
	|	ЭД_ЭлементыНастроекРасчетОтборыДанных.СпособОтбораАналитики = &СпособОтбораАналитики
	|	И ЭД_ЭлементыНастроекРасчетОтборыДанных.Ссылка В(&ЭлементыНастройки)
	|	И ЭД_ЭлементыНастроекРасчетОтборыДанных.Ссылка.Владелец = &НастройкаРасчета";
	
	Запрос.УстановитьПараметр("ЭлементыНастройки", 		ТаблицаПоказателей.ВыгрузитьКолонку("ЭлементНастройки"));
	Запрос.УстановитьПараметр("НастройкаРасчета", 		ЭлектронныйДокумент.НастройкаРасчета);
	Запрос.УстановитьПараметр("СпособОтбораАналитики",	Перечисления.ЭД_СпособыОтбораАналитик.ЗначениеРеквизитаДокумента);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Для Каждого Строка Из Результат.Выгрузить() Цикл
			
			Для Каждого ЭлементСписка Из Строка.ЗначениеРеквизита.Получить() Цикл
				НоваяСтрока = РеквизитыДокумента.Добавить();
				НоваяСтрока.Реквизит = Строка.Реквизит;
				НоваяСтрока.ЗначениеРеквизита = ЭлементСписка.Значение;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыДокумента.Свернуть("Реквизит, ЗначениеРеквизита");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыДокумента.Реквизит КАК Реквизит,
	|	РеквизитыДокумента.ЗначениеРеквизита КАК ЗначениеРеквизита
	|ПОМЕСТИТЬ РеквизитыДокумента
	|ИЗ
	|	&РеквизитыДокумента КАК РеквизитыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭД_ЭлектронныйДокумент.РеквизитыДокумента КАК ЭД_ЭлектронныйДокументРеквизитыДокумента
	|ГДЕ
	|	НЕ ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка.ПометкаУдаления
	|	И ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка.МодельЭД В (&МодельЭД)
	|	И ЭД_ЭлектронныйДокументРеквизитыДокумента.Реквизит В (ВЫБРАТЬ Таб.Реквизит ИЗ РеквизитыДокумента КАК Таб)
	|	И ЭД_ЭлектронныйДокументРеквизитыДокумента.ЗначениеРеквизита В (ВЫБРАТЬ Таб.ЗначениеРеквизита ИЗ РеквизитыДокумента КАК Таб)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка";
	
	Запрос.УстановитьПараметр("РеквизитыДокумента", РеквизитыДокумента);
	Запрос.УстановитьПараметр("МодельЭД", 			ТаблицаПоказателей.ВыгрузитьКолонку("ИсточникМодель"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Процедура СвернутьИтоговуюТаблицуСтроки(ТаблицаКэша, МассивПоказателей, МассивАналитик) Экспорт
	
	Если ТаблицаКэша.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ";
	
	Для Каждого Поле Из МассивАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	Данные."+Поле+" КАК "+Поле+",";
	КонецЦикла;
	Для Каждого Поле Из МассивПоказателей Цикл
		
		///___мкском___Козлов Иван Витальевич___2020/08/10___Начало___№№.№№__1
		///было
		//Запрос.Текст = Запрос.Текст + "
		//|	Данные."+Поле+" КАК "+Поле+",";
		///стало
			
		Если ТаблицаКэша.Колонки[Поле].ТипЗначения.СодержитТип(Тип("Число")) Тогда
			//Не выражать 
			
			Запрос.Текст = Запрос.Текст + "
			|	Данные."+Поле+" КАК "+Поле+",";
		Иначе		
			//Выразить в соответсвии с типом колонки 
			
			Если ТаблицаКэша.Колонки[Поле].ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				//Строку обрезать по метаданным. Тоесть мы не можем хранить больше чем заданный предел, значит и выражать строки следует по этому лимиту 
				
				ДлинаСтроки = ТаблицаКэша.Колонки[Поле].ТипЗначения.КвалификаторыСтроки.Длина; 
				ПределДлины = Метаданные.РегистрыСведений.ЗначенияРСНеЧисловые.Ресурсы.ЗначениеПоказателяСтрока.Тип.КвалификаторыСтроки.Длина;
				
				Если ДлинаСтроки <= 0 
					ИЛИ ДлинаСтроки > ПределДлины
					Тогда
					
					ДлинаСтроки = ПределДлины;	
				КонецЕсли; 
				
				Запрос.Текст = Запрос.Текст + "
				|	ВЫРАЗИТЬ(Данные."+Поле+" КАК Строка("+ ДлинаСтроки + ")) КАК "+Поле+",";	
			Иначе
				//По остальным типам проблем с максимумом не должно быть. 
				Запрос.Текст = Запрос.Текст + "
				|	Данные."+Поле+" КАК "+Поле+",";
			КонецЕсли; 
		КонецЕсли; 

		///___мкском___Козлов Иван Витальевич___2020/08/10___Окончание___ 
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	Данные.НомерСтрокиДанных КАК НомерСтрокиДанных
	|ПОМЕСТИТЬ ТекДанные
	|ИЗ 	
	|	&Данные КАК Данные	
	|;	
	|///////////////////////////////////////////	
	|ВЫБРАТЬ";
	Для Каждого Поле Из МассивАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ТекДанные."+Поле+" КАК "+Поле+",";
	КонецЦикла;
	
	Для Каждого Поле Из МассивПоказателей Цикл
		
		///___мкском___Козлов Иван Витальевич___2020/08/10___Начало___№№.№№__1
		///было
		//Запрос.Текст = Запрос.Текст + "
		//|	СУММА(ТекДанные."+Поле+") КАК "+Поле+",";
		///стало
		
		Если ТаблицаКэша.Колонки[Поле].ТипЗначения.СодержитТип(Тип("Число")) Тогда
			//Суммировать можно только числа 
			
			Запрос.Текст = Запрос.Текст + "
			|	СУММА(ТекДанные."+Поле+") КАК "+Поле+",";
		Иначе		
			//Максимум отработает если выразить 
			
			Запрос.Текст = Запрос.Текст + "
			|	МАКСИМУМ(ТекДанные."+Поле+") КАК "+Поле+",";
		КонецЕсли; 
			
		///___мкском___Козлов Иван Витальевич___2020/08/10___Окончание___ 
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	МАКСИМУМ(ТекДанные.НомерСтрокиДанных) КАК НомерСтрокиДанных
	|ИЗ 	
	|	ТекДанные КАК ТекДанные";
	
	Если МассивАналитик.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|СГРУППИРОВАТЬ ПО";
		Сч = 1;
		Для Каждого Поле Из МассивАналитик Цикл
			Запрос.Текст = Запрос.Текст + "
			|	ТекДанные."+Поле+?(Сч = МассивАналитик.Количество(), "", ",");
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Данные", ТаблицаКэша); 
	Результат = Запрос.Выполнить();
	ТаблицаКэша.Очистить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НС = ТаблицаКэша.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
	КонецЦикла;	
	
	//	Возврат Результат.Выгрузить();
	
КонецПроцедуры

Функция ПолучитьМаксимальныйНомерСтроки(ТаблицаДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.НомерСтрокиДанных КАК НомерСтрокиДанных
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Данные.НомерСтрокиДанных КАК НомерСтрокиДанных
	|ИЗ
	|	Данные КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДанных УБЫВ";
	
	//	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных.СкопироватьКолонки("НомерСтрокиДанных"));
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НомерСтрокиДанных;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанных(НастройкаРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_ДанныеНастроекРасчетов.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ЭД_ДанныеНастроекРасчетов КАК ЭД_ДанныеНастроекРасчетов
	|ГДЕ
	|	ЭД_ДанныеНастроекРасчетов.НастройкаРасчета = &НастройкаРасчета";
	
	Запрос.УстановитьПараметр("НастройкаРасчета", НастройкаРасчета);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Хранилище = Выборка.Данные;
		
		Возврат Хранилище.Получить();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеПоказателей(ТаблицаПоказателей, ЭлектронныйДокумент)
	
	КЧ = Новый КвалификаторыЧисла(10,0);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеЧисло10 = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	МассивТипов.Очистить();
	КЧ = Новый КвалификаторыЧисла(24,7);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеЧисло24 = Новый ОписаниеТипов(МассивТипов,КЧ);
	
	ПустаяТЗ = Новый ТаблицаЗначений;
	ПустаяТЗ.Колонки.Добавить("Показатель", 		Новый ОписаниеТипов("СправочникСсылка.ЭД_Показатели"));
	ПустаяТЗ.Колонки.Добавить("НомерСтрокиДанных", 	ОписаниеЧисло10);
	ПустаяТЗ.Колонки.Добавить("Аналитика", 			Новый ОписаниеТипов("СправочникСсылка.ЭД_Аналитики"));
	ПустаяТЗ.Колонки.Добавить("ЗначениеАналитики", 	Новый ОписаниеТипов("СправочникСсылка.ЭД_ЗначенияАналитик"));
	ПустаяТЗ.Колонки.Добавить("ЗначениеПоказателя", ОписаниеЧисло24);
	
	СписокЭД = ОпределитьСписокЭД(ТаблицаПоказателей, ЭлектронныйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияРС.Показатель КАК Показатель,
	|	ЗначенияРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	ЗначенияРС.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	СУММА(ЗначенияРС.ЗначениеПоказателя) КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ЗначенияПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияРС КАК ЗначенияРС
	|ГДЕ
	|	ЗначенияРС.Показатель В (&Показатели) И ЗначенияРС.ЭлектронныйДокумент В (&СписокЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияРС.НомерСтрокиДанных,
	|	ЗначенияРС.Показатель,
	|	ЗначенияРС.ЭлектронныйДокумент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗначенияРС.ЗначениеПоказателя) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаРС.Показатель КАК Показатель,
	|	АналитикаРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	АналитикаРС.Аналитика КАК Аналитика,
	|	АналитикаРС.ЗначениеАналитики КАК ЗначениеАналитики,
	|	ЗначенияПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.АналитикаРС КАК АналитикаРС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателей
	|		ПО АналитикаРС.Показатель = ЗначенияПоказателей.Показатель
	|			И АналитикаРС.НомерСтрокиДанных = ЗначенияПоказателей.НомерСтрокиДанных
	|			И АналитикаРС.ЭлектронныйДокумент = ЗначенияПоказателей.ЭлектронныйДокумент
	|ГДЕ
	|	АналитикаРС.Показатель В (&Показатели)
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаРС.НомерСтрокиДанных,
	|	АналитикаРС.ЗначениеАналитики,
	|	АналитикаРС.Аналитика,
	|	АналитикаРС.Показатель,
	|	ЗначенияПоказателей.ЗначениеПоказателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(АналитикаРС.ИспользованиеАналитики) > 0";
	
	Запрос.УстановитьПараметр("Показатели", ТаблицаПоказателей.ВыгрузитьКолонку("Источник"));
	Запрос.УстановитьПараметр("СписокЭД", 	СписокЭД);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат ПустаяТЗ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуИсточниковЗаполняемые(ЭлементыНастройки, ЗаполняемыйПоказатель, НастройкаРасчета, ЭлектронныйДокумент, ТаблицаРеквизитов)Экспорт
	
	Сч_ЭН = 1;
	
	тзРезультат = Новый ТаблицаЗначений;
	СтрГруппировка 	= "";
	СтрЗначения 	= "";
	///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
	///было	
	///стало
	тзРезультат.Колонки.Добавить("НомерСтрокиДанных", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	
	МассивАналитик = Новый Массив();
	МассивПоказателей = Новый Массив(); 	
	///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 

	тзАналитики = ЗаполняемыйПоказатель.СтрокаЭД.Аналитики;
	Для Каждого Строка Из тзАналитики Цикл
		КодКолонки = СокрЛП(Строка.Аналитика.Код);
		тзРезультат.Колонки.Добавить(КодКолонки, Новый ОписаниеТипов("СправочникСсылка.ЭД_ЗначенияАналитик"));
		СтрГруппировка 	= СтрГруппировка + КодКолонки + ",";
		
		МассивАналитик.Добавить(КодКолонки);
	КонецЦикла;	
	Для Каждого Строка Из ЭлементыНастройки Цикл
		КодКолонки = СокрЛП(Строка.Код);
		
		///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
		///было		
		//КЧ = Новый КвалификаторыЧисла(Строка.Показатель.Длина, Строка.Показатель.Точность);		
		//МассивТипов = Новый Массив;
		//МассивТипов.Добавить(Тип("Число"));
		//ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);
		//тзРезультат.Колонки.Добавить(КодКолонки, ОписаниеЧисло);
		
		///стало	
		ОписаниеТипа = ПолучитьОписаниеТипаПоКолонкеЭД(Строка.Источник.КолонкаЭД);	
		тзРезультат.Колонки.Добавить(КодКолонки, ОписаниеТипа);	
		
		МассивПоказателей.Добавить(КодКолонки);
		///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
		
		СтрЗначения 	= СтрЗначения + КодКолонки + ",";
	КонецЦикла;	
	СтрГруппировка 	= Лев(СтрГруппировка, СтрДлина(СтрГруппировка) - 1);
	СтрЗначения 	= Лев(СтрЗначения, СтрДлина(СтрЗначения) - 1);
	
	МассивДозаполняемыхЭлементов = Новый Массив;
	
	Для Каждого ЭлементНастройки Из ЭлементыНастройки Цикл
		
		МодельЭД 		= ЭлементНастройки.Источник.Владелец;	
		ОтборыДанных 	= ЭлементНастройки.ОтборыДанных;
		Соответствия 	= ЭлементНастройки.СоответствиеАналитик;
		КодЭлемента		= ЭлементНастройки.Код;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МодельЭД",	МодельЭД);
		
		Если ЭлементНастройки.СуммированиеЗначенийПоАналитике Тогда
			МассивДозаполняемыхЭлементов.Добавить(ЭлементНастройки);	
		КонецЕсли;
		
		// Список ЭД:
		
		Ин = 1;
		Для Каждого Отбор Из ОтборыДанных Цикл
			
			Если Отбор.АналитикаПоказателя Тогда
				Продолжить;
			КонецЕсли;	   			
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.НеВыполняется  
				Тогда
				Продолжить;
			КонецЕсли;	
			
			
			Запрос.Текст = Запрос.Текст + " 
			|ВЫБРАТЬ
			|	ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ втРеквизит" + Ин + "
			|ИЗ
			|	Документ.ЭД_ЭлектронныйДокумент.РеквизитыДокумента КАК ЭД_ЭлектронныйДокументРеквизитыДокумента
			|ГДЕ
			|	ЭД_ЭлектронныйДокументРеквизитыДокумента.Ссылка.МодельЭД = &МодельЭД
			|	И ЭД_ЭлектронныйДокументРеквизитыДокумента.Реквизит = &Реквизит" + Ин + " 
			|	И ЭД_ЭлектронныйДокументРеквизитыДокумента.ЗначениеРеквизита В (&ЗначениеРеквизита" + Ин + ")
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			Запрос.УстановитьПараметр("Реквизит" + Ин,			Отбор.Аналитика);
			
			ЗначениеРеквизита = Новый СписокЗначений;
			ЗначениеРеквизита.Добавить(Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка());
			
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗаданноеЗначениеАналитики Тогда
				ЗначениеРеквизита = Отбор.ЗначениеАналитики.Получить();
			ИначеЕсли Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗначениеРеквизитаДокумента Тогда
				НРек = ТаблицаРеквизитов.Найти(Отбор.Аналитика, "Реквизит");
				Если ЗначениеЗаполнено(НРек) Тогда
					ЗначениеРеквизита = Новый СписокЗначений;
					ЗначениеРеквизита.Добавить(НРек.ЗначениеРеквизита);
				КонецЕсли;	
			ИначеЕсли Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ПериодСоСдвигом Тогда
				НРек = ТаблицаРеквизитов.Найти(Отбор.Аналитика, "Реквизит");
				Если ЗначениеЗаполнено(НРек) Тогда
					ЗначениеРеквизита = Новый СписокЗначений;
					ЗначениеРеквизита.Добавить(ЭД_ОбщегоНазначения.ПолучитьПериодСоСдвигом(НРек.ЗначениеРеквизита, Отбор.ПериодичностьСдвига, Отбор.СдвигПериода));
				КонецЕсли;	
			КонецЕсли;	
			
			Запрос.УстановитьПараметр("ЗначениеРеквизита" + Ин,	ЗначениеРеквизита);
			
			Ин = Ин + 1;
		КонецЦикла;	
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ЭД_ЭлектронныйДокумент.Ссылка КАК ЭД
		|ИЗ
		|	Документ.ЭД_ЭлектронныйДокумент КАК ЭД_ЭлектронныйДокумент
		//|ГДЕ
		//|	ЭД_ЭлектронныйДокумент.МодельЭД = &МодельЭД
		|";
		
		Ин = 1;
		Для Каждого Отбор Из ОтборыДанных Цикл
			
			Если Отбор.АналитикаПоказателя Тогда
				Продолжить;
			КонецЕсли;	
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.НеВыполняется  
				Тогда
				Продолжить;
			КонецЕсли;	
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ  втРеквизит" + Ин + " КАК  втРеквизит" + Ин + "
			|ПО ЭД_ЭлектронныйДокумент.Ссылка = втРеквизит" + Ин + ".Ссылка
			|
			|";
			
			Ин = Ин + 1;
		КонецЦикла;	
		
		
		СписокЭД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭД");
		
		Если Не ЗначениеЗаполнено(СписокЭД) Тогда
			Продолжить;
		КонецЕсли;	
		
		
		// Источники:
		
		ПоказательИсточник = ЭлементНастройки.Источник;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПоказательИсточник",		ПоказательИсточник);
		Запрос.УстановитьПараметр("СписокЭД",			 	СписокЭД);
		
		///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
		///было
		//Запрос.Текст = "
		//|ВЫБРАТЬ
		//|	ЗначенияРС.Показатель КАК Показатель,
		//|	ЗначенияРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
		//|	ЗначенияРС.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		//|	СУММА(ЗначенияРС.ЗначениеПоказателя) КАК ЗначениеПоказателя
		//|ПОМЕСТИТЬ ЗначенияПоказателей
		//|ИЗ
		//|	РегистрСведений.ЗначенияРС КАК ЗначенияРС
		//|ГДЕ
		//|	ЗначенияРС.Показатель = &ПоказательИсточник
		//|	И ЗначенияРС.ЭлектронныйДокумент В (&СписокЭД)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ЗначенияРС.НомерСтрокиДанных,
		//|	ЗначенияРС.Показатель,
		//|	ЗначенияРС.ЭлектронныйДокумент
		//|	
		//|ИМЕЮЩИЕ
		//|	СУММА(ЗначенияРС.ЗначениеПоказателя) <> 0
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|";
		
		///стало. Новые типы показателей. 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияРСНеЧисловые.Показатель КАК Показатель,
		|	ЗначенияРСНеЧисловые.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	ЗначенияРСНеЧисловые.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВЫБОР
		|		КОГДА ЗначенияРСНеЧисловые.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ЭД_ТипыЗначений.Строка)
		|			ТОГДА ЗначенияРСНеЧисловые.ЗначениеПоказателяСтрока
		|		КОГДА ЗначенияРСНеЧисловые.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ЭД_ТипыЗначений.Булево)
		|			ТОГДА ВЫРАЗИТЬ(ЗначенияРСНеЧисловые.ЗначениеПоказателяБулево КАК БУЛЕВО)
		|		КОГДА ЗначенияРСНеЧисловые.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ЭД_ТипыЗначений.Дата)
		|			ТОГДА ЗначенияРСНеЧисловые.ЗначениеПоказателяДата
		|	КОНЕЦ КАК ЗначениеПоказателя,
		|	ЗначенияРСНеЧисловые.Версия КАК ВерсияДата
		|ПОМЕСТИТЬ вт_ТекущиеДанныеНеЧисловые
		|ИЗ
		|	РегистрСведений.ЗначенияРСНеЧисловые КАК ЗначенияРСНеЧисловые
		|ГДЕ
		|	ЗначенияРСНеЧисловые.Показатель = &ПоказательИсточник
		|	И ЗначенияРСНеЧисловые.ЭлектронныйДокумент В(&СписокЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТекущиеДанныеНеЧисловые.Показатель КАК Показатель,
		|	вт_ТекущиеДанныеНеЧисловые.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	вт_ТекущиеДанныеНеЧисловые.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	МАКСИМУМ(вт_ТекущиеДанныеНеЧисловые.ВерсияДата) КАК ВерсияДата
		|ПОМЕСТИТЬ вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату
		|ИЗ
		|	вт_ТекущиеДанныеНеЧисловые КАК вт_ТекущиеДанныеНеЧисловые
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ТекущиеДанныеНеЧисловые.Показатель,
		|	вт_ТекущиеДанныеНеЧисловые.НомерСтрокиДанных,
		|	вт_ТекущиеДанныеНеЧисловые.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТекущиеДанныеНеЧисловые.Показатель КАК Показатель,
		|	вт_ТекущиеДанныеНеЧисловые.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	вт_ТекущиеДанныеНеЧисловые.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	вт_ТекущиеДанныеНеЧисловые.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ вт_ТекущиеДанныеНеЧисловыеИтог
		|ИЗ
		|	вт_ТекущиеДанныеНеЧисловые КАК вт_ТекущиеДанныеНеЧисловые
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату КАК вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату
		|		ПО вт_ТекущиеДанныеНеЧисловые.Показатель = вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату.Показатель
		|			И вт_ТекущиеДанныеНеЧисловые.НомерСтрокиДанных = вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату.НомерСтрокиДанных
		|			И вт_ТекущиеДанныеНеЧисловые.ЭлектронныйДокумент = вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату.ЭлектронныйДокумент
		|			И вт_ТекущиеДанныеНеЧисловые.ВерсияДата = вт_СрезПоследнихТекущихДанныхНеЧисловыхНаДату.ВерсияДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРС.Показатель КАК Показатель,
		|	ЗначенияРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	ЗначенияРС.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СУММА(ЗначенияРС.ЗначениеПоказателя) КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ДанныеЗначенийЧисловые
		|ИЗ
		|	РегистрСведений.ЗначенияРС КАК ЗначенияРС
		|ГДЕ
		|	ЗначенияРС.Показатель = &ПоказательИсточник
		|	И ЗначенияРС.ЭлектронныйДокумент В(&СписокЭД)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияРС.НомерСтрокиДанных,
		|	ЗначенияРС.Показатель,
		|	ЗначенияРС.ЭлектронныйДокумент
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗначенияРС.ЗначениеПоказателя) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТекущиеДанныеНеЧисловыеИтог.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	вт_ТекущиеДанныеНеЧисловыеИтог.Показатель КАК Показатель,
		|	вт_ТекущиеДанныеНеЧисловыеИтог.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	вт_ТекущиеДанныеНеЧисловыеИтог.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ЗначенияПоказателей
		|ИЗ
		|	вт_ТекущиеДанныеНеЧисловыеИтог КАК вт_ТекущиеДанныеНеЧисловыеИтог
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеЗначенийЧисловые.ЭлектронныйДокумент,
		|	ДанныеЗначенийЧисловые.Показатель,
		|	ДанныеЗначенийЧисловые.НомерСтрокиДанных,
		|	ДанныеЗначенийЧисловые.ЗначениеПоказателя
		|ИЗ
		|	ДанныеЗначенийЧисловые КАК ДанныеЗначенийЧисловые";	
		
		Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";	
		///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
			
		Ин = 1;
		Для Каждого Отбор Из ОтборыДанных Цикл
			
			Если НЕ Отбор.АналитикаПоказателя Тогда
				Продолжить;
			КонецЕсли;	
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.НеВыполняется  
				Тогда
				Продолжить;
			КонецЕсли;	
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АналитикаРС.Показатель КАК Показатель,
			|	АналитикаРС.НомерСтрокиДанных КАК НомерСтрокиДанных
			|ПОМЕСТИТЬ втАналитикаОтбор" + Ин + "
			|ИЗ
			|	РегистрСведений.АналитикаРС КАК АналитикаРС
			|ГДЕ
			|	АналитикаРС.Показатель = &ПоказательИсточник
			|	И АналитикаРС.ЭлектронныйДокумент В (&СписокЭД)
			|	И АналитикаРС.Аналитика = &АналитикаОтбор" + Ин + "
			|	И АналитикаРС.ЗначениеАналитики В (&ЗначениеОтбор" + Ин + ")
			|СГРУППИРОВАТЬ ПО	
			|	АналитикаРС.Показатель,
			|	АналитикаРС.НомерСтрокиДанных
			|
			|ИМЕЮЩИЕ
			|	СУММА(АналитикаРС.ИспользованиеАналитики) > 0
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			Запрос.УстановитьПараметр("АналитикаОтбор" + Ин,	Отбор.Аналитика);
			
			ЗначениеРеквизита = Новый СписокЗначений;
			ЗначениеРеквизита.Добавить(Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка());
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗаданноеЗначениеАналитики Тогда
				ЗначениеРеквизита = Отбор.ЗначениеАналитики.Получить();
			ИначеЕсли Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗначениеРеквизитаДокумента Тогда
				НРек = ТаблицаРеквизитов.Найти(Отбор.Аналитика, "Реквизит");
				Если ЗначениеЗаполнено(НРек) Тогда
					ЗначениеРеквизита = Новый СписокЗначений;
					ЗначениеРеквизита.Добавить(НРек.ЗначениеРеквизита);
				КонецЕсли;	
			ИначеЕсли Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ПериодСоСдвигом Тогда
				НРек = ТаблицаРеквизитов.Найти(Отбор.Аналитика, "Реквизит");
				Если ЗначениеЗаполнено(НРек) Тогда
					ЗначениеРеквизита = Новый СписокЗначений;
					ЗначениеРеквизита.Добавить(ЭД_ОбщегоНазначения.ПолучитьПериодСоСдвигом(НРек.ЗначениеРеквизита, Отбор.ПериодичностьСдвига, Отбор.СдвигПериода));
				КонецЕсли;	
			КонецЕсли;	
			
			Запрос.УстановитьПараметр("ЗначениеОтбор" + Ин,		ЗначениеРеквизита);
			
			Ин = Ин + 1;
			
		КонецЦикла;		
		
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Показатель КАК Показатель,
		|	ЗначенияПоказателей.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	ЗначенияПоказателей.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ЗначенияПоказателей.ЗначениеПоказателя КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ втЗначенияПоказателейСОтбором
		|ИЗ
		|	ЗначенияПоказателей КАК ЗначенияПоказателей
		|
		|";
		
		Ин = 1;
		Для Каждого Отбор Из ОтборыДанных Цикл
			
			Если НЕ Отбор.АналитикаПоказателя Тогда
				Продолжить;
			КонецЕсли;	
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.НеВыполняется  
				Тогда
				Продолжить;
			КонецЕсли;	
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналитикаОтбор" + Ин + " КАК втАналитикаОтбор" + Ин + "
			|ПО ЗначенияПоказателей.Показатель = втАналитикаОтбор" + Ин + ".Показатель
			|	И ЗначенияПоказателей.НомерСтрокиДанных = втАналитикаОтбор" + Ин + ".НомерСтрокиДанных
			|";
			
			Ин = Ин + 1;
		КонецЦикла;
		
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|";
		
		// Соответствие аналитик:
		
		ВыборкаПолейОтбора = "";
		
		Ин = 1;
		Для Каждого Соотв Из Соответствия Цикл
			
			//Если НЕ Соотв.ТипСоответствия = Перечисления.ЭД_ТипыСоответствияАналитик.ЗначениеАналитикиИсточника Тогда
			//	Продолжить;
			//КонецЕсли;	
			
			ВыборкаПолейОтбора = ВыборкаПолейОтбора + ",
			|ЕСТЬNULL(втАналитикаСоотв" + Ин + ".ЗначениеАналитики, ЗНАЧЕНИЕ(Справочник.ЭД_ЗначенияАналитик.ПустаяСсылка)) КАК " + СокрЛП(Соотв.АналитикаПриемника.Код) + Символы.ПС;
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АналитикаРС.Показатель КАК Показатель,
			|	АналитикаРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
			|	АналитикаРС.Аналитика КАК Аналитика,
			|	АналитикаРС.ЭлектронныйДокумент КАК ЭлектронныйДокумент,			
			|	АналитикаРС.ЗначениеАналитики КАК ЗначениеАналитики
			|ПОМЕСТИТЬ втАналитикаСоотв" + Ин + "
			|ИЗ
			|	РегистрСведений.АналитикаРС КАК АналитикаРС
			|ГДЕ
			|	АналитикаРС.ЭлектронныйДокумент В (&СписокЭД)
			|	И АналитикаРС.Показатель = &ПоказательИсточник
			|	И АналитикаРС.Аналитика = &АналитикаСоотв" + Ин + "
			|
			|СГРУППИРОВАТЬ ПО	
			|	АналитикаРС.Показатель,
			|	АналитикаРС.НомерСтрокиДанных,
			|	АналитикаРС.Аналитика,
			|	АналитикаРС.ЭлектронныйДокумент,
			|	АналитикаРС.ЗначениеАналитики
			|
			|ИМЕЮЩИЕ
			|	СУММА(АналитикаРС.ИспользованиеАналитики) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|
			|";
			
			Запрос.УстановитьПараметр("АналитикаСоотв" + Ин,	Соотв.АналитикаПриемника);
			
			Ин = Ин + 1;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|   ЗначенияПоказателей.НомерСтрокиДанных КАК НомерСтрокиДанных, 
		|	ЗначенияПоказателей.ЗначениеПоказателя КАК " + СокрЛП(ЭлементНастройки.Код) + "
		|" + ВыборкаПолейОтбора + "
		|ИЗ
		|	втЗначенияПоказателейСОтбором КАК ЗначенияПоказателей
		|
		|";
		
		
		Ин = 1;
		Для Каждого Соотв Из Соответствия Цикл
			Запрос.Текст = Запрос.Текст + "
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ втАналитикаСоотв" + Ин + " КАК втАналитикаСоотв" + Ин + "
			|ПО ЗначенияПоказателей.Показатель = втАналитикаСоотв" + Ин + ".Показатель
			|	И ЗначенияПоказателей.НомерСтрокиДанных = втАналитикаСоотв" + Ин + ".НомерСтрокиДанных
			|	И ЗначенияПоказателей.ЭлектронныйДокумент = втАналитикаСоотв1.ЭлектронныйДокумент			
			|
			|";
			
			Ин = Ин + 1;
		КонецЦикла;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = тзРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
	///было
	//Если СтрГруппировка <> "" Тогда
	//	тзРезультат.Свернуть(СтрГруппировка, СтрЗначения);
	//Иначе	
	//	тзРезультат.Свернуть("", СтрЗначения);
	//КонецЕсли;
	///стало
		
	СвернутьИтоговуюТаблицуСтроки(тзРезультат, МассивПоказателей, МассивАналитик);  
	///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
		
	Для Каждого ТекЭлемент ИЗ МассивДозаполняемыхЭлементов Цикл
		ИтогПоПоказателю = тзРезультат.Итог(ТекЭлемент.Код);
		тзРезультат.ЗаполнитьЗначения(ИтогПоПоказателю, ТекЭлемент.Код);
	КонецЦикла;
	
	
	Если ЗаполняемыйПоказатель.Код = "М0036_П00009" Тогда	
		ИтогПоПоказателю = тзРезультат.Итог("М0041_П00007_001");
		тзРезультат.ЗаполнитьЗначения(ИтогПоПоказателю, "М0041_П00007_001");
		
		ПустыеСтроки = тзРезультат.НайтиСтроки(Новый Структура("Б00000007", Справочники.ЭД_Аналитики.ПустаяСсылка()));
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого Строка Из тзРезультат Цикл
			Если Не ЗначениеЗаполнено(Строка.Б00000007) Тогда
				МассивСтрокКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивСтрокКУдалению Цикл  
			тзРезультат.Удалить(ТекСтрока);
		КонецЦикла;	
		
		
	//ИначеЕсли ЗаполняемыйПоказатель.Код = "М0036_П00002" Тогда	
	//	ИтогПоПоказателю = тзРезультат.Итог("М0013_П00025_004");
	//	тзРезультат.ЗаполнитьЗначения(ИтогПоПоказателю, "М0013_П00025_004");
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00035" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0013_П00010_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00034" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0013_П00002_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00033" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0013_П00003_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00032" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0014_П00004_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00031" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0014_П00002_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00030" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0014_П00003_001 = КоличествоОрганизаций;
	ИначеЕсли ЗаполняемыйПоказатель.Код = "М0034_П00029" Тогда
		КоличествоОрганизаций = тзРезультат.Количество();
		Колонка = тзРезультат.Колонки.Найти("Б00000007");
		тзРезультат.Колонки.Удалить(Колонка);
		тзРезультат.Очистить();
		НоваяСтрока = тзРезультат.Добавить();
		НоваяСтрока.М0015_П00001_001 = КоличествоОрганизаций;
	КонецЕсли;
	
	Возврат тзРезультат;
	
КонецФункции

Функция ПолучитьТаблицуИсточниковВычисляемые(ЭлементыНастройки, ЗаполняемыйПоказатель, НастройкаРасчета, ЭлектронныйДокумент, ТаблицаРеквизитов, СтруктураКэша)Экспорт
	
	Сч_ЭН = 1;
	
	тзРезультат = Новый ТаблицаЗначений;
	СтрГруппировка 	= "";
	СтрЗначения 	= "";
	
	///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
	///было	
	///стало
	тзРезультат.Колонки.Добавить("НомерСтрокиДанных", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	
	МассивАналитик = Новый Массив();
	МассивПоказателей = Новый Массив(); 	
	///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
	
	Для Каждого Строка Из ЗаполняемыйПоказатель.СтрокаЭД.Аналитики Цикл
		КодКолонки = СокрЛП(Строка.Аналитика.Код);
		тзРезультат.Колонки.Добавить(КодКолонки, Новый ОписаниеТипов("СправочникСсылка.ЭД_ЗначенияАналитик"));
		СтрГруппировка 	= СтрГруппировка + КодКолонки + ",";
		
		МассивАналитик.Добавить(КодКолонки);
	КонецЦикла;	
	
	Для Каждого Строка Из ЭлементыНастройки Цикл
		КодКолонки = СокрЛП(Строка.Код);
		
		///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
		///было
		//КЧ = Новый КвалификаторыЧисла(Строка.Показатель.Длина, Строка.Показатель.Точность);
		//
		//МассивТипов = Новый Массив;
		//МассивТипов.Добавить(Тип("Число"));
		//ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);
		//тзРезультат.Колонки.Добавить(КодКолонки, ОписаниеЧисло);
		///стало
		ОписаниеТипа = ПолучитьОписаниеТипаПоКолонкеЭД(Строка.Источник.КолонкаЭД);	
		тзРезультат.Колонки.Добавить(КодКолонки, ОписаниеТипа);	
		
		МассивПоказателей.Добавить(КодКолонки); 
		///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
		
		СтрЗначения 	= СтрЗначения + КодКолонки + ",";
	КонецЦикла;	
	СтрГруппировка 	= Лев(СтрГруппировка, СтрДлина(СтрГруппировка) - 1);
	СтрЗначения 	= Лев(СтрЗначения, СтрДлина(СтрЗначения) - 1);
	
	МодельЭД 					= ЗаполняемыйПоказатель.Владелец;	
	КодЗаполняемогоПоказателя 	= СокрЛП(ЗаполняемыйПоказатель.Код);	
	
	Для Каждого ЭлементНастройки Из ЭлементыНастройки Цикл
		
		//СтрокаЭД 			= ЭлементНастройки.Показатель.СтрокаЭД;
		СтрокаЭД 			= ЭлементНастройки.Источник.СтрокаЭД;
		КодСтрокиЭД 		= СокрЛП(СтрокаЭД.Код);
		
		ОтборыДанных 	= ЭлементНастройки.ОтборыДанных;
		Соответствия 	= ЭлементНастройки.СоответствиеАналитик;
		КодЭлемента		= СокрЛП(ЭлементНастройки.Код);
		КодИсточника	= СокрЛП(ЭлементНастройки.Источник.Код);
		
		//		ТаблицаКэша = СтруктураКэша["ГР" + КодСтрокиЭД];	
		ТаблицаКэша = СтруктураКэша[СтрокаЭД];	
		Если ТаблицаКэша.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаКэша",	ТаблицаКэша);
		
		// Список ЭД:
		
		ОтборыТекст = ""; ///___мкском___Козлов Иван Витальевич___2020/08/10___№№.№№___1 
		
		Ин = 1;
		Для Каждого Отбор Из ОтборыДанных Цикл
			
			Если Не Отбор.АналитикаПоказателя Тогда
				Продолжить;
			КонецЕсли;	
			
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.НеВыполняется Или
				Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ВсеЗначенияАналитикиИсточника 
				Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗначениеОтбора = Новый СписокЗначений;
			ЗначениеОтбора.Добавить(Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка());
			
			Если Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗаданноеЗначениеАналитики Тогда
				ЗначениеОтбора = Отбор.ЗначениеАналитики.Получить();
			ИначеЕсли Отбор.СпособОтбораАналитики = Перечисления.ЭД_СпособыОтбораАналитик.ЗначениеРеквизитаДокумента Тогда
				НРек = ТаблицаРеквизитов.Найти(Отбор.Аналитика, "Реквизит");
				Если ЗначениеЗаполнено(НРек) Тогда
					ЗначениеОтбора = Новый СписокЗначений;
					ЗначениеОтбора.Добавить(НРек.ЗначениеРеквизита);
				КонецЕсли;	
			КонецЕсли;	
			Запрос.УстановитьПараметр("ЗначениеОтбора" + Ин,	ЗначениеОтбора);
			
			КодАналитики = СокрЛП(Отбор.Аналитика);
			
			ОтборыТекст = ОтборыТекст + " 
			|	И втДанные" + КодАналитики + " В (&ЗначениеОтбора" + Ин + ") 
			|";
			
			
			Ин = Ин + 1;
		КонецЦикла;	
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|";
		
		Для Каждого Колонка Из ТаблицаКэша.Колонки Цикл
			ИмяКолонки = СокрЛП(Колонка.Имя);
			Запрос.Текст = Запрос.Текст + "
			|	ТаблицаКэша." + ИмяКолонки + " КАК " + ИмяКолонки + ",";
		КонецЦикла;	  
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 1);		
		
		Запрос.Текст = Запрос.Текст + "		
		|ПОМЕСТИТЬ втТаблицаКэша
		|ИЗ
		|	&ТаблицаКэша КАК ТаблицаКэша
		|;
		|//////////////////////////////////////////////////////////
		|
		|";
		
		
		
		//************************************************************
		
		// Соответствие аналитик:
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|   ТаблицаКэша.НомерСтрокиДанных КАК НомерСтрокиДанных,
		|	ТаблицаКэша." + КодИсточника + " КАК " + КодЭлемента;
		
		ВыборкаПолейОтбора = "";
		
		Ин = 1;
		Для Каждого Соотв Из Соответствия Цикл
			
			КодАналитикиПриемника = СокрЛП(Соотв.АналитикаПриемника.Код);
			
			Если Соотв.ТипСоответствия = Перечисления.ЭД_ТипыСоответствияАналитик.ЗначениеАналитикиИсточника Тогда
				Запрос.Текст = Запрос.Текст + ",
				|	ТаблицаКэша." + КодАналитикиПриемника + " КАК " + КодАналитикиПриемника;
				
			ИначеЕсли Соотв.ТипСоответствия = Перечисления.ЭД_ТипыСоответствияАналитик.ЗаданноеЗначениеАналитики Тогда
				Запрос.Текст = Запрос.Текст + ",
				|	&ЗаданноеЗначениеАналитики" + Ин + " КАК " + КодАналитикиПриемника;
				
				Запрос.УстановитьПараметр("ЗаданноеЗначениеАналитики" + Ин, Соотв.ЗначениеАналитики);
			КонецЕсли;	
			
			Ин = Ин + 1;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "		
		|ИЗ
		|	втТаблицаКэша КАК ТаблицаКэша
		|
		|ГДЕ
		|	ИСТИНА
		|";
		
		Запрос.Текст = Запрос.Текст + ОтборыТекст;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = тзРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	///___мкском___Козлов Иван Витальевич___2020/08/11___Начало___№№.№№__1
	///было
	//Если СтрГруппировка <> "" Тогда
	//	тзРезультат.Свернуть(СтрГруппировка, СтрЗначения);
	//Иначе	
	//	тзРезультат.Свернуть("", СтрЗначения);
	//КонецЕсли;	
	///стало	
	СвернутьИтоговуюТаблицуСтроки(тзРезультат, МассивПоказателей, МассивАналитик);  
	///___мкском___Козлов Иван Витальевич___2020/08/11___Окончание___ 
	
	Возврат тзРезультат;
КонецФункции

Функция ПолучитьПорядокВычисленияПоказателей(НастройкаРасчета,Модель_ЭД) Экспорт	
	
	// Результирующая таблица показателей	
	Показатели=Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Код");
	Показатели.Колонки.Добавить("Показатель");
	Показатели.Колонки.Добавить("Процедура");
	Показатели.Колонки.Добавить("ПроизвольныйКод",			ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("СпособОбработки");
	Показатели.Колонки.Добавить("ПоказателиТекущегоОтчета",	ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("СписокИспользуемых");
	Показатели.Колонки.Добавить("Порядок");
	Показатели.Колонки.Добавить("ЕстьАбсолютныеЗначения",	ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ПересчитыватьПриОткрытии",	ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ТолькоСуммирование",		ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ЕстьДополненияАналитик",	ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	
	Показатели.Колонки.Добавить("ЕстьВычисляемыеПозже",		ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("МассивЭлементовНастройки");
	
	Показатели.Индексы.Добавить("Код");
	
	// Получим список показателей, использующих данные текущего отчета
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭД_ЭлементыНастроекРасчета.Показатель КАК Показатель
	|ПОМЕСТИТЬ ПоказателиТекущегоОтчета
	|ИЗ
	|	Справочник.ЭД_ЭлементыНастроекРасчета КАК ЭД_ЭлементыНастроекРасчета
	|ГДЕ
	|	ЭД_ЭлементыНастроекРасчета.Владелец = &НастройкаРасчета
	|	И ЭД_ЭлементыНастроекРасчета.ИсточникИзТекущегоОтчета
	|	И НЕ ЭД_ЭлементыНастроекРасчета.ПометкаУдаления
	|	И ЭД_ЭлементыНастроекРасчета.Активность = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиТекущегоОтчета.Показатель КАК Показатель
	|ИЗ
	|	ПоказателиТекущегоОтчета КАК ПоказателиТекущегоОтчета";
	
	Запрос.УстановитьПараметр("НастройкаРасчета", НастройкаРасчета);
	
	МассивСтандартные		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	// Получим показатели, рассчитывающиеся на основании других электронных документов
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ФормулыРасчета.Показатель КАК Показатель,
	|	ФормулыРасчета.Показатель.Код КАК Код,
	|	ФормулыРасчета.Формула КАК Процедура,
	|	"""" КАК ПроизвольныйКод,
	|	ЛОЖЬ КАК ПересчитыватьПриОткрытии,
	|	ЛОЖЬ КАК ТолькоСуммирование,
	|	ЛОЖЬ КАК ПоказателиТекущегоОтчета,
	|	ЛОЖЬ КАК ЕстьДополненияАналитик,
	|	ФормулыРасчета.Показатель.СтрокаЭД КАК СтрокаЭД
	|ИЗ
	|	РегистрСведений.ЭД_ФормулыРасчета КАК ФормулыРасчета
	|ГДЕ
	|	ФормулыРасчета.НастройкаРасчета = &НастройкаРасчета
	|	И НЕ ФормулыРасчета.Показатель В
	|				(ВЫБРАТЬ
	|					ПоказателиТекущегоОтчета.Показатель
	|				ИЗ
	|					ПоказателиТекущегоОтчета)";
	
	
	ТабКонечные = Запрос.Выполнить().Выгрузить();
	
	ТабКонечные.Колонки.Добавить("СокрКод");
	
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	
	ЗапросПоказатели.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭД_ЭлементыНастроекРасчета.Источник.Код КАК КодПоказателя,
	|	ЭД_ЭлементыНастроекРасчета.Код КАК КодЭлемента,
	|	ЭД_ЭлементыНастроекРасчета.Показатель КАК ПотребительРасчета,
	|	ЛОЖЬ КАК ЕстьНестандартныеОтборы,
	|	ЭД_ЭлементыНастроекРасчета.ИсточникИзТекущегоОтчета КАК ИсточникИзТекущегоОтчета
	|ПОМЕСТИТЬ ЭлементыНастройки
	|ИЗ
	|	Справочник.ЭД_ЭлементыНастроекРасчета КАК ЭД_ЭлементыНастроекРасчета
	|ГДЕ
	|	ЭД_ЭлементыНастроекРасчета.Владелец = &НастройкаРасчета
	|	И НЕ ЭД_ЭлементыНастроекРасчета.ПометкаУдаления
	|	И ЭД_ЭлементыНастроекРасчета.Активность = ИСТИНА
	|";
	
	ЗапросПоказатели.УстановитьПараметр("НастройкаРасчета",	НастройкаРасчета);
	ЗапросПоказатели.Выполнить();
	
	Для Каждого СтрПоказательКон ИЗ ТабКонечные Цикл
		
		СтрПоказательКон.СокрКод = СокрЛП(СтрПоказательКон.Код);
		
		СтрПоказатель = Показатели.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрПоказатель,СтрПоказательКон,,"Код");
		СтрПоказатель.СпособОбработки = Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение;
		
		СтрПоказатель.Код		= СтрПоказательКон.СокрКод;
		СтрПоказатель.Порядок	= 1;	
		ТекФормулаДляПроверки 	= "";
		
		ДанныеРасчета = ПолучитьДанныеРасчетаПоказателя(СтрПоказатель.Показатель,ЗапросПоказатели,СтрПоказатель.Процедура);
		СтрПоказатель.СписокИспользуемых	= ДанныеРасчета.СписокИспользуемыхВсего;
		
		Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
			
			ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
			
			Попытка
				
				Выполнить(ТекФормулаДляПроверки);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
				Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
					
					ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательКон.Показатель.Код)));
					ЭД_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим остальные показатели
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиЭД.Ссылка КАК Показатель,
	|	ПоказателиЭД.Код КАК Код,
	|	ЕСТЬNULL(ФормулыРасчета.Процедура, &ПустойТекст) КАК Процедура,
	|	ЕСТЬNULL(ФормулыРасчета.ПроцедураВычисления, &ПустойТекст) КАК ПроцедураВычисления,
	|	ЕСТЬNULL(ФормулыРасчета.СпособОбработки, ЗНАЧЕНИЕ(Перечисление.ЭД_СпособыОбработкиПоказателейОтчетов.ПустаяСсылка)) КАК СпособОбработки,
	|	ЕСТЬNULL(ФормулыРасчета.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод,
	|	ЕСТЬNULL(ФормулыРасчета.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
	|	ЕСТЬNULL(ФормулыРасчета.РедактированиеВозможно, ЛОЖЬ) КАК РедактированиеВозможно,
	|	ЕСТЬNULL(ФормулыРасчета.ТолькоСуммирование, ЛОЖЬ) КАК ТолькоСуммирование,
	|	ВЫБОР
	|		КОГДА ПоказателиТекущегоОтчета.Показатель ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоказателиТекущегоОтчета,
	|	ЛОЖЬ КАК ЕстьДополненияАналитик,
	|	ПоказателиЭД.СтрокаЭД КАК СтрокаЭД
	|ИЗ
	|	Справочник.ЭД_Показатели КАК ПоказателиЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФормулыРасчетов.Показатель КАК Показатель,
	|			ФормулыРасчетов.Формула КАК Процедура,
	|			ФормулыРасчетов.НастройкаРасчета КАК ПроцедураВычисления,
	|			NULL КАК СпособОбработки,
	|			ЛОЖЬ КАК ПересчитыватьПриОткрытии,
	|			ЛОЖЬ КАК ПроизвольныйКод,
	|			ЛОЖЬ КАК РедактированиеВозможно,
	|			ЛОЖЬ КАК ТолькоСуммирование
	|		ИЗ
	|			РегистрСведений.ЭД_ФормулыРасчета КАК ФормулыРасчетов
	|		ГДЕ
	|			ФормулыРасчетов.НастройкаРасчета = &НастройкаРасчета
	|			И ФормулыРасчетов.Показатель В
	|					(ВЫБРАТЬ
	|						ПоказателиТекущегоОтчета.Показатель
	|					ИЗ
	|						ПоказателиТекущегоОтчета)) КАК ФормулыРасчета
	|		ПО ПоказателиЭД.Ссылка = ФормулыРасчета.Показатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиТекущегоОтчета КАК ПоказателиТекущегоОтчета
	|		ПО ПоказателиЭД.Ссылка = ПоказателиТекущегоОтчета.Показатель
	|ГДЕ
	|	ПоказателиЭД.Владелец = &Модель_ЭД
	|	И НЕ ПоказателиЭД.ПометкаУдаления
	|	И НЕ ПоказателиЭД.Ссылка В
	|				(ВЫБРАТЬ
	|					ФормулыРасчетов.Показатель КАК Показатель
	|				ИЗ
	|					РегистрСведений.ЭД_ФормулыРасчета КАК ФормулыРасчетов
	|				ГДЕ
	|					ФормулыРасчетов.НастройкаРасчета = &НастройкаРасчета
	|					И НЕ ФормулыРасчетов.Показатель В
	|							(ВЫБРАТЬ
	|								ПоказателиТекущегоОтчета.Показатель
	|							ИЗ
	|								ПоказателиТекущегоОтчета))";
	
	Запрос.УстановитьПараметр("НастройкаРасчета",	НастройкаРасчета);
	Запрос.УстановитьПараметр("Модель_ЭД",			Модель_ЭД);
	Запрос.УстановитьПараметр("ПустойТекст",		"");
	
	ТабПоказатели = Запрос.Выполнить().Выгрузить();
	
	ТабПоказатели.Колонки.Добавить("СписокИспользуемых");
	ТабПоказатели.Колонки.Добавить("СокрКод");
	ТабПоказатели.Колонки.Добавить("ЕстьАбсолютныеЗначения", ЭД_ОбщегоНазначения.ПолучитьОписаниеТиповБулево());
	
	// Заполним для каждого показателя список кодов других показателей этого отчета, используемых
	// при расчете.
	
	Для Каждого СтрПоказательТаб ИЗ ТабПоказатели Цикл
		
		Если СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета = ПолучитьДанныеРасчетаПоказателя(СтрПоказательТаб.Показатель, ЗапросПоказатели, СтрПоказательТаб.Процедура);
			
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			ВычисляемыйПоказатель	= ДанныеРасчета.ВычисляемыйПоказатель;
			
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ЭД_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;	
			
			Если МассивСтандартные.Найти(СтрПоказательТаб.Показатель)=Неопределено Тогда
				
				ВычисляемыйПоказатель = Ложь;
				ТекСпособОбработки = Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение;
				
			Иначе
				
				ТекСпособОбработки = ?(ВычисляемыйПоказатель, Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Вычисление, Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение); 
				
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////////////////
			
			ТекПроцедураВычисления=СтрПоказательТаб.Процедура;
			
			СписокИспользуемых=Новый СписокЗначений;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемых.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
				//Если ВычисляемыйПоказатель Тогда
				//	
				//	ТекПроцедураВычисления=СтрЗаменить(ТекПроцедураВычисления,ТекОперанд.Представление,ТекОперанд.Значение);
				//	
				//КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемых.Добавить("", ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			СтрПоказательТаб.СписокИспользуемых	= СписокИспользуемых;
			СтрПоказательТаб.СпособОбработки	= ТекСпособОбработки;
			СтрПоказательТаб.Процедура			= ТекПроцедураВычисления;
			
		Иначе 
			
			ДанныеРасчета = ПолучитьДанныеРасчетаПоказателя(СтрПоказательТаб.Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			
			СтрПоказательТаб.СписокИспользуемых	= ДанныеРасчета.СписокИспользуемыхВсего;
			СтрПоказательТаб.СпособОбработки	= Перечисления.ЭД_СпособыОбработкиПоказателейОтчетов.Заполнение;
			
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Формула для показателя: %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ЭД_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
						
						Возврат Неопределено;
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		СтрПоказательТаб.СокрКод=СокрЛП(СтрПоказательТаб.Код);
		
	КонецЦикла;
	
	Уровень=2;
	
	Пока ТабПоказатели.Количество()>0 Цикл
		
		МассивОбработанных=Новый Массив;
		
		Для Каждого Показатель ИЗ ТабПоказатели Цикл
			
			ЕстьВычисляемыеПозже=Ложь;
			
			Для Каждого Код ИЗ Показатель.СписокИспользуемых Цикл
				
				Если ПустаяСтрока(Код.Значение) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Показатели.Найти(Код.Значение,"Код")=Неопределено Тогда
					
					// В формуле расчета есть показатели, которые на данном шаге вычислений
					// еще не определены
					
					ЕстьВычисляемыеПозже=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ (ЕстьВычисляемыеПозже И Показатель.СписокИспользуемых.Количество()>0) Тогда
				
				СтрПоказатель=Показатели.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрПоказатель,Показатель,,"Код");
				
				Для Каждого Элемент Из СтрПоказатель.СписокИспользуемых Цикл
					Элемент.Значение = Элемент.Представление;
				КонецЦикла;
				
				СтрПоказатель.Код=Показатель.СокрКод;
				СтрПоказатель.Порядок=Уровень;
				
				МассивОбработанных.Добавить(Показатель);
				
				Уровень=Уровень+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Обработанный ИЗ МассивОбработанных Цикл  // Удаляем уже упорядоченные показатели
			
			ТабПоказатели.Удалить(Обработанный);
			
		КонецЦикла;
		
		Если МассивОбработанных.Количество()=0 И ТабПоказатели.Количество()>0 Тогда
			
			Возврат Неопределено;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	ЗапросПоказатели.МенеджерВременныхТаблиц.Закрыть();
	
	Показатели.Сортировать("Порядок");
	
	//Обойдем таблицу и заполним первично признак и массив элементов
	Для Каждого Строка Из Показатели Цикл
		
		Строка.ЕстьВычисляемыеПозже = Ложь;
		
		Если Строка.СписокИспользуемых.Количество() > 0 Тогда
			Строка.МассивЭлементовНастройки = ПолучитьМассивЭлементовНастройки(Строка.СписокИспользуемых, НастройкаРасчета);		
		КонецЕсли;
		
	КонецЦикла;
	
	//Обойдем таблицу и заполним реальное значение признака ЕстьВычисляемыеПозже
	Для Каждого Строка Из Показатели Цикл
		
		Для Каждого СтрПоказателя Из Показатели Цикл
			Если СтрПоказателя.СписокИспользуемых.Количество() > 0 Тогда
				
				Для Каждого Элемент Из СтрПоказателя.МассивЭлементовНастройки Цикл
					Если Строка.Показатель = Элемент.Источник Тогда
						Строка.ЕстьВычисляемыеПозже = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции // ПолучитьПорядокВычисленияПоказателей()

Функция ПолучитьДанныеРасчетаПоказателя(Показатель, ЗапросПоказатели,ТекстФормула) Экспорт
	
	ВычисляемыйПоказатель=Истина;
	
	ЗапросПоказатели.Текст = "ВЫБРАТЬ 
	|	ЭлементыНастройки.КодПоказателя,
	|	ЭлементыНастройки.КодЭлемента,
	|	ЭлементыНастройки.ЕстьНестандартныеОтборы,
	|	ЭлементыНастройки.ИсточникИзТекущегоОтчета
	|ИЗ
	|	ЭлементыНастройки КАК ЭлементыНастройки
	|ГДЕ
	|	ЭлементыНастройки.ПотребительРасчета = &Показатель";
	
	ЗапросПоказатели.УстановитьПараметр("Показатель",	Показатель);
	
	Результат=ЗапросПоказатели.Выполнить().Выбрать();
	СписокИспользуемыхТек	= Новый СписокЗначений;
	СписокИспользуемыхВсего	= Новый СписокЗначений;
	
	Пока Результат.Следующий() Цикл
		
		ТекКодЭлемента = СокрЛП(Результат.КодЭлемента);
		
		Если СтрНайти(ТекстФормула, ТекКодЭлемента)=0 Тогда
			
			ЭлементСсылка = ПолучитьЭлементНастройки(Результат.КодЭлемента, Показатель);
			
			ОтметитьКакНеиспользуемый(ЭлементСсылка);
			
			Продолжить;
			
		КонецЕсли;
		
		СписокИспользуемыхВсего.Добавить(ТекКодЭлемента);
		
		Если Результат.ИсточникИзТекущегоОтчета Тогда
			
			СписокИспользуемыхТек.Добавить(СокрЛП(Результат.КодПоказателя), ТекКодЭлемента);
			
			Если Результат.ЕстьНестандартныеОтборы Тогда
				
				ВычисляемыйПоказатель=Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ВычисляемыйПоказатель=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("СписокИспользуемыхТек",	СписокИспользуемыхТек);
	СтруктураДанные.Вставить("СписокИспользуемыхВсего",	СписокИспользуемыхВсего);
	СтруктураДанные.Вставить("ВычисляемыйПоказатель",	ВычисляемыйПоказатель);
	
	ТекстДляПроверки="";
	
	РазобратьЭлементы(ТекстФормула, ТекстДляПроверки);
	
	СтруктураДанные.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеРасчетаПоказателя()

Функция РазобратьПроизвольныйКод(ТекстПроцедуры,КодПоказателя,ЕстьАбсолютныеЗначения=Ложь) Экспорт
	
	СписокКодов=Новый СписокЗначений;
	МассивСлужебныхСимволов=ПолучитьМассивСлужебныхСимволов();
	
	ЕстьПоказатель=Ложь;
	
	ЕстьЧисло=Ложь;
	ЕстьЗнак=Ложь;
	
	ТекСтрока="";
	ТекКодПоказателя="";
	ДлинаТекста=СтрДлина(ТекстПроцедуры);
	
	Для КодСимв=1 По ДлинаТекста Цикл
		
		ТекСимв=Сред(ТекстПроцедуры,КодСимв,1);
		
		Если ЕстьПоказатель Тогда  // Идет формирование строки кода показателя
			
			Если МассивСлужебныхСимволов.Найти(ТекСимв)=Неопределено Тогда
				
				ТекКодПоказателя=ТекКодПоказателя+ТекСимв;
				
			Иначе // найдено завершение кода показателя
				
				Если НЕ ТекКодПоказателя=КодПоказателя И СписокКодов.НайтиПоЗначению(ТекКодПоказателя)=Неопределено Тогда
					
					СписокКодов.Добавить(ТекКодПоказателя);
					
				КонецЕсли;
				
				ЕстьПоказатель=Ложь;
				ТекКодПоказателя="";
				
			КонецЕсли;
			
		Иначе // Идет поиск строки "ПОКАЗАТЕЛИ."
			
			Если СтрНайти("123456789",ТекСимв)>0 Тогда // найдены числовые символы, не относящиеся к коду показателя.
				ЕстьЧисло=Истина;
			ИначеЕсли 
				СтрНайти("+-=<>",ТекСимв)>0 Тогда // найдены арифметические символы.
				ЕстьЗнак=Истина;
			КонецЕсли;
			
			Если ЕстьЧисло И ЕстьЗнак Тогда
				ЕстьАбсолютныеЗначения=Истина;
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
			КонецЕсли;
			
			ТекСтрока=ТекСтрока+ТекСимв;
			
			Если СтрНайти(ВРЕГ(ТекСтрока),"ПОКАЗАТЕЛИ.")>0 Тогда // Со следующего символа начинается код показателя
				
				ЕстьПоказатель=Истина;
				ТекСтрока="";
				
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат СписокКодов;
	
КонецФункции // РазобратьПроизвольныйКод()

Функция ПолучитьМассивСлужебныхСимволов()
	
	// Инициируем массив специальных символов
	
	МассивСлужебныхСимволов=Новый Массив;
	МассивСлужебныхСимволов.Добавить("+");
	МассивСлужебныхСимволов.Добавить("-");
	МассивСлужебныхСимволов.Добавить("*");
	МассивСлужебныхСимволов.Добавить("/");
	МассивСлужебныхСимволов.Добавить("=");
	МассивСлужебныхСимволов.Добавить(";");
	МассивСлужебныхСимволов.Добавить(" ");
	МассивСлужебныхСимволов.Добавить("(");
	МассивСлужебныхСимволов.Добавить(")");
	МассивСлужебныхСимволов.Добавить(Символы.ВК);
	МассивСлужебныхСимволов.Добавить(Символы.ВТаб);
	МассивСлужебныхСимволов.Добавить(Символы.НПП);
	МассивСлужебныхСимволов.Добавить(Символы.ПС);
	МассивСлужебныхСимволов.Добавить(Символы.ПФ);
	МассивСлужебныхСимволов.Добавить(Символы.Таб);
	
	Возврат МассивСлужебныхСимволов;
	
КонецФункции // ПолучитьМассивСлужебныхСимволов()

Функция ПолучитьЭлементНастройки(КодЭлемента, Показатель) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭД_ЭлементыНастроекРасчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭД_ЭлементыНастроекРасчета КАК ЭД_ЭлементыНастроекРасчета
	|ГДЕ
	|	ЭД_ЭлементыНастроекРасчета.Показатель = &Показатель
	|	И ЭД_ЭлементыНастроекРасчета.Код = &КодЭлемента";
	
	Запрос.УстановитьПараметр("Показатель",			Показатель);
	Запрос.УстановитьПараметр("КодЭлемента",		КодЭлемента);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.Ссылка;
	
КонецФункции 

Процедура ОтметитьКакНеиспользуемый(ИсточникДанных) Экспорт
	
	ИсточникОбъект = ИсточникДанных.ПолучитьОбъект();
	ИсточникОбъект.ОбменДанными.Загрузка	= Истина;
	ИсточникОбъект.Активность				= Ложь;			
	ИсточникОбъект.Записать();
	
КонецПроцедуры // ОтметитьКакНеиспользуемый()

// Возвращает список кодов элементов расчета, использованных в формуле расчета показателя 
// и формирует строку для проверки на синтаксическую правильность формулы.
//
// Параметры
//  ТекстФормула   - Строка, текст формулы процедуры расчета.
//  ТекстДляПроверки - Строка, переменная в которую помещается строка для проверки.
// Возвращаемое значение
//  СписокЗначений - список операндов, найденных в формуле.
//
Функция РазобратьЭлементы(ТекстФормула, ТекстДляПроверки = Неопределено,ЕстьАбсолютныеЗначения=Ложь) Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	ТекКод="";
	ЕстьОперанд=Ложь;
	
	ЕстьЧисло=Ложь;
	ЕстьЗнак=Ложь;
	
	ДлинаТекста=СтрДлина(ТекстФормула);
	
	Для НомСимв=1 По ДлинаТекста Цикл
		
		ТекСимвол=Сред(ТекстФормула,НомСимв,1);
		
		Если (НЕ ЕстьОперанд) Тогда 
			
			Если СтрНайти("123456789",ТекСимвол)>0 Тогда // найдены числовые символы, не относящиеся к коду показателя.
				ЕстьЧисло=Истина;
			ИначеЕсли 
				СтрНайти("+-=<>",ТекСимвол)>0 Тогда // найдены арифметические символы.
				ЕстьЗнак=Истина;
			КонецЕсли;
			
			Если ЕстьЧисло И ЕстьЗнак Тогда
				ЕстьАбсолютныеЗначения=Истина;
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекСимвол="[" ИЛИ ТекСимвол="{"Тогда
			
			ЕстьОперанд=Истина;
			
			ЕстьЧисло=Ложь;
			ЕстьЗнак=Ложь;
			
		ИначеЕсли ТекСимвол="]" ИЛИ ТекСимвол="}" Тогда
			
			Если СписокКодов.НайтиПоЗначению(ТекКод)=Неопределено Тогда
				
				СписокКодов.Добавить(ТекКод);
				
			КонецЕсли;
			
			ЕстьОперанд=Ложь;
			ТекКод="";
			
			Если ТекстДляПроверки <> Неопределено Тогда
				ТекстДляПроверки = ТекстДляПроверки + " 1 ";
			КонецЕсли;
			
		ИначеЕсли ЕстьОперанд Тогда
			
			ТекКод=ТекКод+ТекСимвол;
			
		ИначеЕсли ТекстДляПроверки <> Неопределено Тогда
			
			ТекстДляПроверки = ТекстДляПроверки + ТекСимвол;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокКодов;	
	
КонецФункции // РазобратьЭлементы(ТекстПроцедуры)

Процедура СоздатьФайлИЗагрузить(Ссылка, АдресДД, Файл) Экспорт
	
	ДД = ПолучитьИзВременногоХранилища(АдресДД);
	
	//Проверим есть ли предыдущие версии этого файла.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭД_ФайлыЭлектронныхДокументов.Ссылка КАК Ссылка,
	|	ЭД_ВерсииФайловЭлектронныхДокументов.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ЭД_ФайлыЭлектронныхДокументов КАК ЭД_ФайлыЭлектронныхДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭД_ВерсииФайловЭлектронныхДокументов КАК ЭД_ВерсииФайловЭлектронныхДокументов
	|		ПО ЭД_ВерсииФайловЭлектронныхДокументов.Владелец = ЭД_ФайлыЭлектронныхДокументов.Ссылка
	|ГДЕ
	|	ЭД_ФайлыЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ЭД_ФайлыЭлектронныхДокументов.Наименование = &ИмяФайла
	|	И ЭД_ВерсииФайловЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	//И ЭД_ВерсииФайловЭлектронныхДокументов.Наименование = &ИмяФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭД_ВерсииФайловЭлектронныхДокументов.ДатаВерсии";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПолноеИмяФайла", Файл.ИмяФайла);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Версия) Тогда
			СоздатьВерсиюФайла(Ссылка, АдресДД, Файл, Выборка.Ссылка);
		Иначе
			СоздатьВерсиюФайла(Ссылка, АдресДД, Файл);
		КонецЕсли;
		
	Иначе
		СоздатьВерсиюФайла(Ссылка, АдресДД, Файл);
	КонецЕсли;
	
	
	ИмяФайлаВрем = ПолучитьИмяВременногоФайла(Файл.Расширение);
	ДД.Записать(ИмяФайлаВрем);
	
	//
	
	Обработка = Обработки.msИмпортИзExcel_NativeXLSX.Создать();
	
	СоответствиеИмпортируемыхОбластей = Новый Соответствие;
	ТД = Обработка.ЗагрузитьМетодом_NativeXLSX(ИмяФайлаВрем, "свод", СоответствиеИмпортируемыхОбластей);
	
	//ТабличныйДокумент.Очистить();
	//ТабличныйДокумент.Вывести(ТД);
	
	УдалитьФайлы(ИмяФайлаВрем); 
	
КонецПроцедуры

Процедура СоздатьВерсиюФайла(ЭлектронныйДокумент, АдресДД, Файл, ТекФайл = Неопределено)
	
	НоваяВерсия = Справочники.ЭД_ВерсииФайловЭлектронныхДокументов.СоздатьЭлемент();
	Если ЗначениеЗаполнено(ТекФайл) Тогда
		НоваяВерсия.Владелец = ТекФайл;
	Иначе
		НовыйФайл = Справочники.ЭД_ФайлыЭлектронныхДокументов.СоздатьЭлемент();
		НовыйФайл.Наименование = Файл.Имя;
		НовыйФайл.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НовыйФайл.ПолучитьСсылкуНового();
		НовыйФайл.Записать();
		
		НоваяВерсия.Владелец = НовыйФайл.Ссылка;
	КонецЕсли;
	НоваяВерсия.Наименование = Файл.Имя;
	НоваяВерсия.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяВерсия.ДатаИзмененияФайла = Файл.ДатаИзмененияФайла;
	НоваяВерсия.ДатаВерсии = ТекущаяДата();
	НоваяВерсия.ПолноеИмяФайла = Файл.ПолноеИмя;
	НоваяВерсия.ПолучитьСсылкуНового();
	НоваяВерсия.Записать();
	
	НаборЗаписей = РегистрыСведений.ЭД_ХранилищеВерсийФайловЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(НоваяВерсия);
	НаборЗаписей.Очистить();
	
	ДД = ПолучитьИзВременногоХранилища(АдресДД);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Версия = НоваяВерсия;
	НоваяСтрока.ХранимыйФайл = Новый ХранилищеЗначения(ДД);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НайтиМаксимальныйНомер(Модель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭД_НастройкиПоУмолчанию.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	РегистрСведений.ЭД_НастройкиПоУмолчанию КАК ЭД_НастройкиПоУмолчанию
	|ГДЕ
	|	ЭД_НастройкиПоУмолчанию.Модель = &Модель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("Модель", Модель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторСтроки + 1;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции	

///___мкском___Козлов Иван Витальевич___2020/08/26___№№.№№___1 

////////////ОбобщениеРасчетов
//Начало//
#Область ОбобщениеРасчетов

Функция ПолучитьОписаниеТипаПоКолонкеЭД(КолонкаЭД)Экспорт
	//Описание типа для колонки по настройке колонки 
	
	МассивТипов = Новый Массив;	 
	Если КолонкаЭД.ТипЗначения = Перечисления.ЭД_ТипыЗначений.Число  
		ИЛИ НЕ ЗначениеЗаполнено(КолонкаЭД.ТипЗначения)
		Тогда
		//Число	
		
		ДлинаЧисла = КолонкаЭД.Длина; 
		ПределДлины = Метаданные.РегистрыСведений.ЗначенияРС.Ресурсы.ЗначениеПоказателя.Тип.КвалификаторыЧисла.Разрядность;
		
		Если ДлинаЧисла <= 0 
			ИЛИ ДлинаЧисла > ПределДлины
			Тогда
			
			ДлинаЧисла = ПределДлины;	
		КонецЕсли;
		
		РазрядностьДроби = КолонкаЭД.Точность;
		ПределТочности = Метаданные.РегистрыСведений.ЗначенияРС.Ресурсы.ЗначениеПоказателя.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;

		Если РазрядностьДроби <= 0 
			ИЛИ РазрядностьДроби > ПределТочности
			Тогда
			
			РазрядностьДроби = ПределТочности;	
		КонецЕсли;
		
		КЧ = Новый КвалификаторыЧисла(ДлинаЧисла, РазрядностьДроби);
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов,КЧ);			
	Иначе
		//Остальные типы 
		
		Если КолонкаЭД.ТипЗначения = Перечисления.ЭД_ТипыЗначений.Булево Тогда
			МассивТипов.Добавить(Тип("Булево"));	
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);

		ИначеЕсли КолонкаЭД.ТипЗначения = Перечисления.ЭД_ТипыЗначений.Строка Тогда 
			//Не превышать длину реквизита 
			
			МассивТипов.Добавить(Тип("Строка"));
				
			ДлинаСтроки = КолонкаЭД.ДлинаСтроки; 
			ПределДлины = Метаданные.РегистрыСведений.ЗначенияРСНеЧисловые.Ресурсы.ЗначениеПоказателяСтрока.Тип.КвалификаторыСтроки.Длина;
			
			Если ДлинаСтроки <= 0 
				ИЛИ ДлинаСтроки > ПределДлины
				Тогда
				
				ДлинаСтроки = ПределДлины;	
			КонецЕсли; 
				
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов,,,,Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));
			
		ИначеЕсли КолонкаЭД.ТипЗначения = Перечисления.ЭД_ТипыЗначений.Дата Тогда 
			МассивТипов.Добавить(Тип("Дата"));	
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		Иначе 
			//Неописанные типы числом 
			КЧ = Новый КвалификаторыЧисла(24, 7);
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов,КЧ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеТипа;
КонецФункции

#КонецОбласти
//Конец//
////////////ОбобщениеРасчетов 



////////////РаботаСНастройкамиФормул
//Начало//
#Область РаботаСНастройкамиФормул

Функция СформироватьФормулуПоОбщемуПравилу(Показатели)Экспорт
	//Из модуля формы. Общее правило формирования формулы по показателям 
	
	Текст = "";
	Для Каждого Пок Из Показатели Цикл
		Текст = Текст + " + [" + СокрЛП(Пок.Код) + "]";			
	КонецЦикла;	
	
	Возврат Сред(Текст, 4);		
КонецФункции

Функция ЭтоЧисловыеПоказателиРасчета(ПоказательРасчета)Экспорт
	///___мкском___Козлов Иван Витальевич___2020/08/10___№№.№№___1 
	
	ЭтоЧисловыеПоказатели = Истина;
	
	ТипПоказателяПриемника = ПоказательРасчета.КолонкаЭД.ТипЗначения;

	Если НЕ ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Число 
		И ЗначениеЗаполнено(ТипПоказателяПриемника)
		Тогда
		ЭтоЧисловыеПоказатели = Ложь;
	КонецЕсли;

	Возврат ЭтоЧисловыеПоказатели;
КонецФункции

Функция ПолучитьРезультатПроверкиВалидностиФормулыПоказателя(НастройкаРасчета, ПоказательРасчета, 
	ТекстФормулы = Неопределено, ОшибкиПодробно = Ложь)Экспорт
	//Анализирует текст формулы показателя по определенной настройке 
	
	ТекстФормулыДляАнализа = "";
	Если ТекстФормулы = Неопределено Тогда
		//Если текст не задан - найти его в регистре
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЭД_ФормулыРасчета.НастройкаРасчета КАК НастройкаРасчета,
			|	ЭД_ФормулыРасчета.Показатель КАК Показатель,
			|	ЭД_ФормулыРасчета.Формула КАК Формула
			|ИЗ
			|	РегистрСведений.ЭД_ФормулыРасчета КАК ЭД_ФормулыРасчета
			|ГДЕ
			|	ЭД_ФормулыРасчета.НастройкаРасчета = &НастройкаРасчета
			|	И ЭД_ФормулыРасчета.Показатель = &Показатель";
		
		Запрос.УстановитьПараметр("НастройкаРасчета", НастройкаРасчета);
		Запрос.УстановитьПараметр("Показатель", ПоказательРасчета);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ТекстФормулыДляАнализа = ВыборкаДетальныеЗаписи.Формула;	
		КонецЕсли; 
	Иначе
		ТекстФормулыДляАнализа = ТекстФормулы;
	КонецЕсли; 
	
	СтруктураРезультат = Новый Структура("Успешно, ТекстОшибки, РезультатВычисления", Истина, "Не заполнен текст формулы!", Неопределено);	
	Если НЕ ЗначениеЗаполнено(ТекстФормулыДляАнализа) Тогда
		//Пустая формула - это не ошибка. Оставим как было 
		Возврат СтруктураРезультат; 
	КонецЕсли; 
	
	//Типовые значения  
	ТиповоеЧисло = "1"; 
	ТиповаяДата = "Дата(""" + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + """)";
	ТиповоеБулево = "Истина";
	ТиповаяСтрока = """[Строка]""";
	
	Если Найти(ТекстФормулыДляАнализа, "/") > 0 Тогда
		//Проверять деление на 0 
		ТиповоеЧисло = "0";	
	КонецЕсли; 
	
	//Таблица операндов	
	ТаблицаОперандов = ЭД_НастройкаРасчетаСервер.Операнды_ПолучитьТаблицуЭлементовНастроекПоПоказателюПриемнику(
		ПоказательРасчета,
		НастройкаРасчета
	);
	
	//Подстановка параметров 
	Для каждого ДанныеОперанда Из ТаблицаОперандов Цикл
		
		ТипПоказателяИсточника = ДанныеОперанда.ПоказательИсточник.КолонкаЭД.ТипЗначения;
		
		Если ТипПоказателяИсточника = Перечисления.ЭД_ТипыЗначений.Число  
			ИЛИ НЕ ЗначениеЗаполнено(ТипПоказателяИсточника)
			Тогда
			
			ОперандПодстановки = ТиповоеЧисло;
		Иначе
			Если ТипПоказателяИсточника = Перечисления.ЭД_ТипыЗначений.Булево Тогда
				ОперандПодстановки = ТиповоеБулево;	
				
			ИначеЕсли ТипПоказателяИсточника = Перечисления.ЭД_ТипыЗначений.Строка Тогда 
				ОперандПодстановки = ТиповаяСтрока;
				
			ИначеЕсли ТипПоказателяИсточника = Перечисления.ЭД_ТипыЗначений.Дата Тогда
				ОперандПодстановки = ТиповаяДата;	
			Иначе
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		ТекстФормулыДляАнализа = СтрЗаменить(ТекстФормулыДляАнализа, "[" + СокрЛП(ДанныеОперанда.КодЭлемента) + "]", ОперандПодстановки);
	КонецЦикла; 
		
	//Попытка выполнения 
	Попытка	
		Если Найти(ТекстФормулыДляАнализа, "[") > 0
			И Найти(ТекстФормулыДляАнализа, "]") > 0
			Тогда
			
			ВызватьИсключение "Не все операнды удалось преобразовать! Возможно вы вносили их в текст формулы вручную!";
		КонецЕсли; 
		
		//Выполнение кода
		Выполнить("СтруктураРезультат.РезультатВычисления = " + ТекстФормулыДляАнализа);
		
		//Различные условия типизации в зависимости от типа расчета
		Если ТипЗнч(НастройкаРасчета) = Тип("СправочникСсылка.ЭД_НастройкиРасчетов") Тогда
			//Это проверка формулы расчета 
								
			//После выполнения кода - пробуем преобразовать тип в тип приёмника 
			ТипПоказателяПриемника = ПоказательРасчета.КолонкаЭД.ТипЗначения;		
			ТипизированныйРезультат = Неопределено;
			
			Попытка	
				Если ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Число  
					ИЛИ НЕ ЗначениеЗаполнено(ТипПоказателяПриемника)
					Тогда
					ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Число;
					ТипизированныйРезультат = Число(СтруктураРезультат.РезультатВычисления);
				Иначе
					Если ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Булево Тогда	
						ТипизированныйРезультат = Булево(СтруктураРезультат.РезультатВычисления);
						
					ИначеЕсли ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Строка Тогда 
						ТипизированныйРезультат = Строка(СтруктураРезультат.РезультатВычисления);
						
					ИначеЕсли ТипПоказателяПриемника = Перечисления.ЭД_ТипыЗначений.Дата Тогда
						ТипизированныйРезультат = Дата(Формат(СтруктураРезультат.РезультатВычисления, "ДФ=yyyyMMddHHmmss"));						
					КонецЕсли; 
				КонецЕсли;
			Исключение
				Если ОшибкиПодробно Тогда
					
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
				Иначе
					ТекстОшибки = ОписаниеОшибки();
				КонецЕсли; 
				
				ВызватьИсключение 
				"Не удалось произвести типизацию результата к типу """ + Строка(ТипПоказателяПриемника) + """:" + Символы.ПС + ТекстОшибки;
			КонецПопытки; 
		Иначе
			//Это проверка формулы правил проверки. Результат должен типизироваться в булево
			//Если в конструктор формата попадет число или дата - будет число или дата. Тоесть не четко булево. Так и проверяем
			
		    СтрокаБулево = Формат(СтруктураРезультат.РезультатВычисления, "БЛ=ложь; БИ=истина");
			Если НЕ СтрокаБулево = "ложь" 
				И НЕ СтрокаБулево = "истина"
				Тогда
				
				ВызватьИсключение 
				"Не верный формат булево: """ + СтрокаБулево + """";
			КонецЕсли; 
			
			ТипизированныйРезультат = Истина;
		КонецЕсли; 
		
		//Проверка пройдена 			
		СтруктураРезультат.ТекстОшибки = "";
		СтруктураРезультат.РезультатВычисления = ТипизированныйРезультат;
	Исключение	
		Если ОшибкиПодробно Тогда
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		Иначе
			ТекстОшибки = ОписаниеОшибки();
		КонецЕсли; 
						
		СтруктураРезультат.ТекстОшибки = 
		"При выполнении формулы возникла ошибка:" + Символы.ПС + ТекстОшибки;
		
		СтруктураРезультат.Успешно = Ложь;
	КонецПопытки; 
	
	Возврат СтруктураРезультат;
КонецФункции

Функция ПреобразоватьВСтрокуЗначениеОперандаФормулы(ЗначениеОперанда)Экспорт
	//Каждый тип должен быть преобразован в строку согласно своему правилу 
	
	Если ТипЗнч(ЗначениеОперанда) = Тип("Строка") Тогда
		СтрокаРезультат = ЗначениеОперанда;
		
	ИначеЕсли ТипЗнч(ЗначениеОперанда) = Тип("Число") Тогда 
		СтрокаРезультат = Формат(ЗначениеОперанда, "ЧН=0; ЧГ=");
		
	ИначеЕсли ТипЗнч(ЗначениеОперанда) = Тип("Булево") Тогда 
		СтрокаРезультат = Формат(ЗначениеОперанда, "БЛ=Ложь; БИ=Истина");

	ИначеЕсли ТипЗнч(ЗначениеОперанда) = Тип("Дата") Тогда 
		СтрокаРезультат = "Дата(""" + Формат(ЗначениеОперанда, "ДФ=yyyyMMddHHmmss") + """)";		
	КонецЕсли; 
		
	Возврат СтрокаРезультат;	
КонецФункции
 
#КонецОбласти
//Конец//
////////////РаботаСНастройкамиФормул 



//Начало//////////////РаботаСВерсиямиРасчетов
#Область РаботаСВерсиямиРасчетов

////Удаление
Процедура ВыполнитьУдалениеВыбранныхВерсий(ЭДДокументСсылка, МассивУдаляемыхВерсий = Неопределено, ЭтаФорма = Неопределено)Экспорт
	//Удаление числовых и не числовых показателей в рамках версий 

	//Начало//////////////ПодготовкаПараметров
	#Область ПодготовкаПараметров
	  
	Если НЕ ЗначениеЗаполнено(ЭДДокументСсылка.АктуальнаяВерсия) Тогда
		Возврат;	
	КонецЕсли;

	//Определим необходимость замены актуальной версии 
	УдаленаАктуальнаяВерсия = Ложь;
	Если НЕ МассивУдаляемыхВерсий = Неопределено Тогда
		//Это требуется только тогда, когда на удаление выбрана актуальная версия, тоесть последняя 
		
		Если НЕ МассивУдаляемыхВерсий.Найти(ЭДДокументСсылка.АктуальнаяВерсия) = Неопределено Тогда
			//Была удалена 
			УдаленаАктуальнаяВерсия = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	//Таблица версий по порядку 
	ТаблицаВерсийРезультат = ПолучитьТаблицуВерсийПоДокументу(ЭДДокументСсылка); 
	Если ТаблицаВерсийРезультат.Количество() <= 1 Тогда
		Возврат;	
	КонецЕсли;
	ТаблицаВерсийРезультат.Сортировать("Дата,Номер");
	ПоследняяВерсия = ТаблицаВерсийРезультат[ТаблицаВерсийРезультат.Количество()-1].Версия;
	
	#КонецОбласти
	//Конец//////////////ПодготовкаПараметров 
	
	
	//Начало//////////////Удаление
	#Область Удаление
			
	Если МассивУдаляемыхВерсий = Неопределено Тогда
		//Полная свертка. Просто всё стираем и сохраняем актуальную версию  
				
		//Начало//////////////ПолнаяСвертка
		#Область ПолнаяСвертка
		
		//Сворачиваем числовые показатели 
		ТаблицаСернутыхПоказателей = ПолучитьЗначениеСверткиЧисловыхПоказателейПоДатеВерсии(ЭДДокументСсылка);	 

		//Стереть все числовые показатели в регистре по документу 
		НаборЗаписейПрошлыйРСУд = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
		НаборЗаписейПрошлыйРСУд.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейПрошлыйРСУд.Записать();
		
		//И создать их заново в рамках одной версии 
		НаборЗаписейНовыйРС = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
		НаборЗаписейНовыйРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейНовыйРС.Отбор.Версия.Установить(ЭДДокументСсылка.АктуальнаяВерсия);
		
		Для каждого СтрокаДанных Из ТаблицаСернутыхПоказателей Цикл
			НоваяЗапись = НаборЗаписейНовыйРС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
			НоваяЗапись.Версия = ЭДДокументСсылка.АктуальнаяВерсия;
		КонецЦикла; 	
		НаборЗаписейНовыйРС.Записать();
		
		//Сворачиваем аналитики
		ТаблицаСвернутыхАналитик = ПолучитьЗначениеСверткиАналитикПоДатеВерсии(ЭДДокументСсылка);
		
		//Стереть все аналитики в регистре по документу 
		НаборЗаписейПрошлыйАналитики = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
		НаборЗаписейПрошлыйАналитики.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейПрошлыйАналитики.Записать();
		
		//И создать их заново в рамках одной версии 
		НаборЗаписейНовыйАналитики = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
		НаборЗаписейНовыйАналитики.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейНовыйАналитики.Отбор.Версия.Установить(ЭДДокументСсылка.АктуальнаяВерсия);
		
		Для каждого СтрокаДанных Из ТаблицаСвернутыхАналитик Цикл
			НоваяЗапись = НаборЗаписейНовыйАналитики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
			НоваяЗапись.ЭлектронныйДокумент = ЭДДокументСсылка;
			НоваяЗапись.Версия = ЭДДокументСсылка.АктуальнаяВерсия;
			НоваяЗапись.ИспользованиеАналитики = 1;
		КонецЦикла; 		
		НаборЗаписейНовыйАналитики.Записать();
	
		//Нечисловые + удаление объектов документов
		Для каждого ТекВерсия Из ТаблицаВерсийРезультат Цикл
			
			Если ТекВерсия.Версия = ЭДДокументСсылка.АктуальнаяВерсия Тогда
				//Не сносить актуальную версию при полном удалении 
				
				Продолжить;
			КонецЕсли; 
			
			//Удаляем все данные прошлой версии 	 
			НаборЗаписейПрошлыйНРСУд = РегистрыСведений.ЗначенияРСНеЧисловые.СоздатьНаборЗаписей();
			НаборЗаписейПрошлыйНРСУд.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
			НаборЗаписейПрошлыйНРСУд.Отбор.Версия.Установить(ТекВерсия.Версия);
			НаборЗаписейПрошлыйНРСУд.Записать();
			
			ОбъектВерсии = ТекВерсия.Версия.ПолучитьОбъект();
			ОбъектВерсии.Удалить();
		КонецЦикла;
		
		#КонецОбласти
		//Конец//////////////ПолнаяСвертка 
	Иначе
		//Начало//////////////ЧастичнаяСвертка
		#Область ЧастичнаяСвертка
		
		//Пролистывание всех версий подряд позволяет четко определить модель удаления "от начала к концу"
		Для каждого ТекВерсия Из ТаблицаВерсийРезультат Цикл
			
			Если МассивУдаляемыхВерсий.Найти(ТекВерсия.Версия) = Неопределено  Тогда
				//Версию удалять не нужно 
				Продолжить;		
			КонецЕсли; 
			
			//Перенести все дельты в следующую версию
			Если НЕ ТекВерсия.Версия = ПоследняяВерсия Тогда
				//Если это не последняя версия
				
				//Получим следующую версию
				ИндексСледующейВерсии = ТаблицаВерсийРезультат.Индекс(ТекВерсия);
				ИндексСледующейВерсии = ИндексСледующейВерсии + 1;
				СледующаяВерсия = ТаблицаВерсийРезультат[ИндексСледующейВерсии];
				
				//Выгрузить числовые значения
				НаборЗаписейПрошлыйРСВыгрузка = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
				НаборЗаписейПрошлыйРСВыгрузка.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
				НаборЗаписейПрошлыйРСВыгрузка.Отбор.Версия.Установить(ТекВерсия.Версия);
				НаборЗаписейПрошлыйРСВыгрузка.Прочитать();
				ТЗНабораПрошлогоРС = НаборЗаписейПрошлыйРСВыгрузка.Выгрузить();
								
				//Передвинуть дельту в следующую версию			
				НаборЗаписейСледующийРС= РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
				НаборЗаписейСледующийРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
				НаборЗаписейСледующийРС.Отбор.Версия.Установить(СледующаяВерсия.Версия);
				НаборЗаписейСледующийРС.Прочитать();
				
				Для каждого ЗаписьСледующая Из НаборЗаписейСледующийРС Цикл
					//Для каждой следующей записи найдем прошлую дельту и прибавим к значению показателя 
					
					СтруктураПоиска = Новый Структура("Показатель, НомерСтрокиДанных, ЭлектронныйДокумент");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗаписьСледующая);
					
					МассивПоиска = ТЗНабораПрошлогоРС.НайтиСтроки(СтруктураПоиска);
					Если МассивПоиска.Количество() > 0 Тогда
						
						СтрокаПрошлыхДанных = МассивПоиска[0];
						
						//Наращивание дельты 
						ЗаписьСледующая.ЗначениеПоказателя = ЗаписьСледующая.ЗначениеПоказателя + СтрокаПрошлыхДанных.ЗначениеПоказателя;			
					КонецЕсли; 	
				КонецЦикла; 	
				НаборЗаписейСледующийРС.Записать();
				
				//Выгрузить аналитики. 			
				НаборЗаписейПрошлыйАналитикаВыгрузка = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
				НаборЗаписейПрошлыйАналитикаВыгрузка.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
				НаборЗаписейПрошлыйАналитикаВыгрузка.Отбор.Версия.Установить(ТекВерсия.Версия);
				НаборЗаписейПрошлыйАналитикаВыгрузка.Прочитать();
				ТЗНабораПрошлогоАналитика = НаборЗаписейПрошлыйАналитикаВыгрузка.Выгрузить();

				//Подменить вычитаемую аналитику в следующей версии на предыдущую.  	
				НаборЗаписейСледующийАналитика= РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
				НаборЗаписейСледующийАналитика.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
				НаборЗаписейСледующийАналитика.Отбор.Версия.Установить(СледующаяВерсия.Версия);
				НаборЗаписейСледующийАналитика.Прочитать();
				ТЗНабораБудущегоАналитика = НаборЗаписейСледующийАналитика.Выгрузить();
				
				//Начать перемещение данных  
				СтруктураПоиска = Новый Структура("Показатель, НомерСтрокиДанных, Аналитика");//Это ключ
				
				Для каждого ЗаписьСледующая Из НаборЗаписейСледующийАналитика Цикл
					//Для каждой следующей записи, а их по две, та что с минусом заменяется на прошлую версию минуса.
					//Тоесть, есть пара старая А(-1):Б(+1) И  новая Б(-1):В(+1) --- СТАНЕТ А(-1)В(+1), где АБВ - значения аналитик
					
					Если ЗаписьСледующая.ИспользованиеАналитики > 0 Тогда
						//Положительные значения новой версии нас не волнуют - они должны остаться 
						Продолжить;	
					КонецЕсли; 
					
					//Обрабатываем все минусы, в которые хотим перенести прошлый минус 	
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗаписьСледующая);				
					МассивПоиска = ТЗНабораПрошлогоАналитика.НайтиСтроки(СтруктураПоиска);
					
					Если МассивПоиска.Количество() = 1 Тогда
						//Это удаление первой записи. Она удалиться ниже, но её минус также должен исчезнуть в следующем показателе
						//Тоесть, есть А(+1) и А(-1):Б(+1) - СТАНЕТ Б(+1)
						ИдексЗаписиНаУдаление = НаборЗаписейСледующийАналитика.Индекс(ЗаписьСледующая);
						НаборЗаписейСледующийАналитика.Удалить(ИдексЗаписиНаУдаление);
					Иначе	
						//Удаление парных записей - сдвиг 
						Для каждого СтрокаДанныхПоиска Из МассивПоиска Цикл
							Если СтрокаДанныхПоиска.ИспользованиеАналитики > 0 Тогда
								//Положительные значения прошлой версии нас не волнуют - они будут удалены кодом ниже
								Продолжить;	
							КонецЕсли; 
							
							//Нашли минус, который хотим перенести. Переносим
							ЗаписьСледующая.ЗначениеАналитики = СтрокаДанныхПоиска.ЗначениеАналитики;
							Прервать;
						КонецЦикла; 	
					КонецЕсли; 										 	
				КонецЦикла;
				
				//И это ещё не всё.	
				//Для каждой прошлой записи, которая не поучаствует в перемешиваниии, передвинуть её в новую версию. 
				//Так надо из-за модели версионирования аналитик, которая предполагает, что версия сохраняет изменение только определенной строки. 
				Для каждого ТекДанныеАналитик Из ТЗНабораПрошлогоАналитика Цикл	
					//Ищем одинаковые строки
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекДанныеАналитик);		
					МассивПоискаАналитикиВБудущем = ТЗНабораБудущегоАналитика.НайтиСтроки(СтруктураПоиска);	
					
					Если МассивПоискаАналитикиВБудущем.Количество() > 0 Тогда
						//Указанные строки однозначно принимали участие в перемешивании
						Продолжить;	
					КонецЕсли; 
					
					//Выбранные строки точно не были перемешаны, надо их спасти
				    НоваяСтрокаПереносаДанных = НаборЗаписейСледующийАналитика.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереносаДанных, ТекДанныеАналитик);
					НоваяСтрокаПереносаДанных.Версия = СледующаяВерсия.Версия;
					НоваяСтрокаПереносаДанных.ЭлектронныйДокумент = ЭДДокументСсылка;
				КонецЦикла;
				
				НаборЗаписейСледующийАналитика.Записать();
			КонецЕсли; 
			
			//Удаляем все данные прошлой версии. Числовые 	 
			НаборЗаписейПрошлыйРС = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
			НаборЗаписейПрошлыйРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
			НаборЗаписейПрошлыйРС.Отбор.Версия.Установить(ТекВерсия.Версия);
			НаборЗаписейПрошлыйРС.Записать();
			
			//Удаляем все данные прошлой версии. Не числовые 	 
			НаборЗаписейПрошлыйНРС = РегистрыСведений.ЗначенияРСНеЧисловые.СоздатьНаборЗаписей();
			НаборЗаписейПрошлыйНРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
			НаборЗаписейПрошлыйНРС.Отбор.Версия.Установить(ТекВерсия.Версия);
			НаборЗаписейПрошлыйНРС.Записать();   
			
			//Удаляем все данные прошлой версии. Аналитики 	 
			НаборЗаписейПрошлыйАналитика = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
			НаборЗаписейПрошлыйАналитика.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
			НаборЗаписейПрошлыйАналитика.Отбор.Версия.Установить(ТекВерсия.Версия);
			НаборЗаписейПрошлыйАналитика.Записать();
			
			//Удаляем объект версии
			ОбъектВерсии = ТекВерсия.Версия.ПолучитьОбъект();
			ОбъектВерсии.Удалить();
		КонецЦикла;
		
		#КонецОбласти
		//Конец//////////////ЧастичнаяСвертка 		
	КонецЕсли; 
	
	#КонецОбласти
	//Конец//////////////Удаление 
	
	
	//Начало//////////////ЗавершениеСверткиАктуализация
	#Область ЗавершениеСверткиАктуализация
 
	//Получаем новую последнюю версию 
	ТаблицаВерсийРезультат = ПолучитьТаблицуВерсийПоДокументу(ЭДДокументСсылка);
	ТаблицаВерсийРезультат.Сортировать("Дата,Номер");
	ПоследняяВерсия = ТаблицаВерсийРезультат[ТаблицаВерсийРезультат.Количество()-1].Версия;

	//Выполним замену актуальной версии при необходимости
	Если УдаленаАктуальнаяВерсия Тогда
				
		Если ЭтаФорма = Неопределено Тогда
			ОбъектЭД = ЭДДокументСсылка.ПолучитьОбъект();
			ОбъектЭД.АктуальнаяВерсия = ПоследняяВерсия;
			ОбъектЭД.Записать();
		Иначе
			ЭтаФорма.Объект.АктуальнаяВерсия = ПоследняяВерсия;	
			ЭтаФорма.Записать();
		КонецЕсли; 		
	КонецЕсли;
	
	Если НЕ ЭтаФорма = Неопределено Тогда			
		//Отобразим актуальную версию 
		ЭтаФорма.ОбновитьСписокВерсий();
		ЭтаФорма.ПоказатьВерсиюНаСервере(ПоследняяВерсия);
	КонецЕсли; 
				
	#КонецОбласти
	//Конец//////////////ЗавершениеСверткиАктуализация
КонецПроцедуры

Функция ПолучитьТаблицуВерсийПоДокументу(ЭДДокументСсылка)Экспорт
	//Таблица версий 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЭД_Версия.Ссылка КАК Версия,
	|	ДокументЭД_Версия.Дата КАК Дата,
	|	ДокументЭД_Версия.Ответственный КАК Ответственный,
	|	ДокументЭД_Версия.Номер КАК Номер
	|ИЗ
	|	Документ.ЭД_Версия КАК ДокументЭД_Версия
	|ГДЕ
	|	ДокументЭД_Версия.ЭлектронныйДокумент = &СсылкаДокумента
	|	И НЕ ДокументЭД_Версия.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СсылкаДокумента", ЭДДокументСсылка);		
	ТаблицаВерсийРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВерсийРезультат;	
КонецФункции

////Свертка 
Процедура ВыполнитьСверткуДоВыбраннойВерсии(ЭДДокументСсылка, ВыбраннаяВерсияСсылка = Неопределено, ЭтаФорма = Неопределено)Экспорт
	//Свертка значений в регистрах 
	
	//Начало//////////////ПодготовкаПараметров
	#Область ПодготовкаПараметров
	
	Если НЕ ЗначениеЗаполнено(ЭДДокументСсылка.Ссылка) Тогда
		Возврат;	
	КонецЕсли; 
	
	//Получаем таблицу версий
	ТаблицаВерсийРезультат = ПолучитьТаблицуВерсийПоДокументу(ЭДДокументСсылка); 
	Если ТаблицаВерсийРезультат.Количество() <= 1 Тогда
		Возврат;	
	КонецЕсли;
	ТаблицаВерсийРезультат.Сортировать("Дата,Номер");
	
	//Получаем таблицу свёртки числовых показателей 
	ТаблицаСернутыхПоказателей = ПолучитьЗначениеСверткиЧисловыхПоказателейПоДатеВерсии(ЭДДокументСсылка, ВыбраннаяВерсияСсылка.Дата);
	
	//Получаем таблицу свернутых аналитик 
	ТаблицаСвернутыхАналитик = ПолучитьЗначениеСверткиАналитикПоДатеВерсии(ЭДДокументСсылка, ВыбраннаяВерсияСсылка.Дата);
	#КонецОбласти
	//Конец//////////////ПодготовкаПараметров 
	
	
	//Начало//////////////Свертка
	#Область Свертка

	Для каждого ТекВерсия Из ТаблицаВерсийРезультат Цикл
		
		Если ТекВерсия.Версия = ВыбраннаяВерсияСсылка  Тогда
			//Как только дошли до текущей версии - закончить очистку 
			Прервать;		
		КонецЕсли; 
		
		//Удаляем все данные прошлой версии. Числовые 	 
		НаборЗаписейПрошлыйРС = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
		НаборЗаписейПрошлыйРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейПрошлыйРС.Отбор.Версия.Установить(ТекВерсия.Версия);
		НаборЗаписейПрошлыйРС.Записать();
		
		//Удаляем все данные прошлой версии. Не числовые 	 
		НаборЗаписейПрошлыйНРС = РегистрыСведений.ЗначенияРСНеЧисловые.СоздатьНаборЗаписей();
		НаборЗаписейПрошлыйНРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейПрошлыйНРС.Отбор.Версия.Установить(ТекВерсия.Версия);
		НаборЗаписейПрошлыйНРС.Записать();
		
		//Удаляем все данные прошлой версии. Аналитики
		НаборЗаписейПрошлыйАналитики = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
		НаборЗаписейПрошлыйАналитики.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
		НаборЗаписейПрошлыйАналитики.Отбор.Версия.Установить(ТекВерсия.Версия);
		НаборЗаписейПрошлыйАналитики.Записать();
			
		//Удаляем объект версии
		ОбъектВерсии = ТекВерсия.Версия.ПолучитьОбъект();
		ОбъектВерсии.Удалить();			
	КонецЦикла;
		
	//Создадим запись в рамках выбранной версии, предварительно очистив
	НаборЗаписейНовыйРСОчистить = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
	НаборЗаписейНовыйРСОчистить.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
	НаборЗаписейНовыйРСОчистить.Отбор.Версия.Установить(ВыбраннаяВерсияСсылка);
	НаборЗаписейНовыйРСОчистить.Записать();
	
	НаборЗаписейНовыйРС = РегистрыСведений.ЗначенияРС.СоздатьНаборЗаписей();
	НаборЗаписейНовыйРС.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
	НаборЗаписейНовыйРС.Отбор.Версия.Установить(ВыбраннаяВерсияСсылка);
	
	Для каждого СтрокаДанных Из ТаблицаСернутыхПоказателей Цикл
		НоваяЗапись = НаборЗаписейНовыйРС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных); 
		НоваяЗапись.Версия = ВыбраннаяВерсияСсылка;
	КонецЦикла; 
	НаборЗаписейНовыйРС.Записать();
	
	//И создать их заново в рамках одной версии 
	НаборЗаписейНовыйАналитикиОчистить = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
	НаборЗаписейНовыйАналитикиОчистить.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
	НаборЗаписейНовыйАналитикиОчистить.Отбор.Версия.Установить(ВыбраннаяВерсияСсылка);
	НаборЗаписейНовыйАналитикиОчистить.Записать();
	
	НаборЗаписейНовыйАналитики = РегистрыСведений.АналитикаРС.СоздатьНаборЗаписей();
	НаборЗаписейНовыйАналитики.Отбор.ЭлектронныйДокумент.Установить(ЭДДокументСсылка);
	НаборЗаписейНовыйАналитики.Отбор.Версия.Установить(ВыбраннаяВерсияСсылка);
	
	Для каждого СтрокаДанных Из ТаблицаСвернутыхАналитик Цикл
		НоваяЗапись = НаборЗаписейНовыйАналитики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаДанных);
		НоваяЗапись.ЭлектронныйДокумент = ЭДДокументСсылка;
		НоваяЗапись.Версия = ВыбраннаяВерсияСсылка;
		НоваяЗапись.ИспользованиеАналитики = 1;
	КонецЦикла; 		
	НаборЗаписейНовыйАналитики.Записать();
	
	#КонецОбласти
	//Конец//////////////Свертка 
	
		
	//Начало//////////////ЗавершениеСверткиАктуализация
	#Область ЗавершениеСверткиАктуализация
  	
	Если НЕ ЭтаФорма = Неопределено Тогда			
		//Отобразим актуальную версию
		
		//Получаем новую последнюю версию 
		ТаблицаВерсийРезультат = ПолучитьТаблицуВерсийПоДокументу(ЭДДокументСсылка);
		ТаблицаВерсийРезультат.Сортировать("Дата,Номер");
		ПоследняяВерсия = ТаблицаВерсийРезультат[ТаблицаВерсийРезультат.Количество()-1].Версия;

		ЭтаФорма.ОбновитьСписокВерсий();
		ЭтаФорма.ПоказатьВерсиюНаСервере(ПоследняяВерсия);
	КонецЕсли; 
				
	#КонецОбласти
	//Конец//////////////ЗавершениеСверткиАктуализация
КонецПроцедуры

Функция ПолучитьЗначениеСверткиЧисловыхПоказателейПоДатеВерсии(ЭДДокументСсылка, ДатаВерсии = Неопределено)Экспорт
	//Свернуть все показатели по дате версии 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияРС.Показатель КАК Показатель,
	|	ЗначенияРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	ЗначенияРС.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ЗначенияРС.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияРС.Версия КАК Версия
	|ПОМЕСТИТЬ вт_ВсеЗначенияЧисовыеНеГрупп
	|ИЗ
	|	РегистрСведений.ЗначенияРС КАК ЗначенияРС
	|ГДЕ
	|	ЗначенияРС.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ЗначенияРС.Версия.Дата <= &ДатаВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВсеЗначенияЧисовыеНеГрупп.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	вт_ВсеЗначенияЧисовыеНеГрупп.Показатель КАК Показатель,
	|	вт_ВсеЗначенияЧисовыеНеГрупп.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	СУММА(вт_ВсеЗначенияЧисовыеНеГрупп.ЗначениеПоказателя) КАК ЗначениеПоказателя
	|ИЗ
	|	вт_ВсеЗначенияЧисовыеНеГрупп КАК вт_ВсеЗначенияЧисовыеНеГрупп
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ВсеЗначенияЧисовыеНеГрупп.ЭлектронныйДокумент,
	|	вт_ВсеЗначенияЧисовыеНеГрупп.Показатель,
	|	вт_ВсеЗначенияЧисовыеНеГрупп.НомерСтрокиДанных
	|
	|ИМЕЮЩИЕ
	|	СУММА(вт_ВсеЗначенияЧисовыеНеГрупп.ЗначениеПоказателя) > 0";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭДДокументСсылка);
	Если ЗначениеЗаполнено(ДатаВерсии) Тогда
		Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	Иначе
		Запрос.УстановитьПараметр("ДатаВерсии", ТекущаяДата()+1);	
	КонецЕсли;
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат;
КонецФункции

Функция ПолучитьЗначениеСверткиАналитикПоДатеВерсии(ЭДДокументСсылка, ДатаВерсии = Неопределено)Экспорт
	//Свернуть все аналитики(в том числе реквизиты) по дате версии 
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикаРС.Показатель КАК Показатель,
	|	АналитикаРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	АналитикаРС.Аналитика КАК Аналитика,
	|	АналитикаРС.ЗначениеАналитики КАК ЗначениеАналитики,
	|	АналитикаРС.АналитикаПоказателя КАК АналитикаПоказателя
	|ИЗ
	|	РегистрСведений.АналитикаРС КАК АналитикаРС
	|ГДЕ
	|	АналитикаРС.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И АналитикаРС.Версия.Дата <= &ДатаВерсии
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаРС.Аналитика,
	|	АналитикаРС.ЗначениеАналитики,
	|	АналитикаРС.Показатель,
	|	АналитикаРС.НомерСтрокиДанных,
	|	АналитикаРС.АналитикаПоказателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(АналитикаРС.ИспользованиеАналитики) > 0";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭДДокументСсылка);
	Если ЗначениеЗаполнено(ДатаВерсии) Тогда
		Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	Иначе
		Запрос.УстановитьПараметр("ДатаВерсии", ТекущаяДата()+1);	
	КонецЕсли;
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат;
КонецФункции

Функция ПолучитьЗначениеСверткиРеквизитовПоДатеВерсии(ЭДДокументСсылка, ДатаВерсии = Неопределено)Экспорт
	//Отдельно выделяем реквизиты из аналитик. Свертка реквизитов по дате версии. Для отображения в документах 
	//Не стал свомещать в предыдущем запросе, на случай если потребуется что-то изменить только в реквизитах 
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикаРС.Показатель КАК Показатель,
	|	АналитикаРС.НомерСтрокиДанных КАК НомерСтрокиДанных,
	|	АналитикаРС.Аналитика КАК Аналитика,
	|	АналитикаРС.ЗначениеАналитики КАК ЗначениеАналитики,
	|	АналитикаРС.АналитикаПоказателя КАК АналитикаПоказателя
	|ПОМЕСТИТЬ вт_РеквизитыПредПоиск
	|ИЗ
	|	РегистрСведений.АналитикаРС КАК АналитикаРС
	|ГДЕ
	|	АналитикаРС.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И АналитикаРС.Версия.Дата <= &ДатаВерсии
	|	И АналитикаРС.АналитикаПоказателя = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаРС.Аналитика,
	|	АналитикаРС.ЗначениеАналитики,
	|	АналитикаРС.Показатель,
	|	АналитикаРС.НомерСтрокиДанных,
	|	АналитикаРС.АналитикаПоказателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(АналитикаРС.ИспользованиеАналитики) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_РеквизитыПредПоиск.Аналитика КАК Реквизит,
	|	вт_РеквизитыПредПоиск.ЗначениеАналитики КАК ЗначениеРеквизита
	|ИЗ
	|	вт_РеквизитыПредПоиск КАК вт_РеквизитыПредПоиск
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_РеквизитыПредПоиск.ЗначениеАналитики,
	|	вт_РеквизитыПредПоиск.Аналитика";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭДДокументСсылка);
	Если ЗначениеЗаполнено(ДатаВерсии) Тогда
		Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	Иначе
		Запрос.УстановитьПараметр("ДатаВерсии", ТекущаяДата()+1);	
	КонецЕсли;
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат;	
КонецФункции
 
#КонецОбласти
//Конец//////////////РаботаСВерсиямиРасчетов 


