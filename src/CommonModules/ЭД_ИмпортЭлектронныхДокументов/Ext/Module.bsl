////////////ПолучениеДанныхИзФайла
//Начало//
#Область ПолучениеДанныхИзФайла

////Загрузка данных 

Процедура ЗагрузитьДанныеИзФайлаВЭлектронныйДокумент(ЭлектронныйДокумент, СтруктураФайла, СтруктураКэша, АдресДД) Экспорт
	//Загрузить данные из файла    

	ИмяФайлаВрем = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
	
	Если ТипЗнч(АдресДД) = Тип("ДвоичныеДанные") Тогда
		ДД = АдресДД;	
	Иначе
		ДД = ПолучитьИзВременногоХранилища(АдресДД);
	КонецЕсли; 

	Попытка
		ДД.Записать(ИмяФайлаВрем);	
	Исключение
	    ТекстОшибки = ОписаниеОшибки();
		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки; 
		
	Обработка = Обработки.msИмпортИзExcel_NativeXLSX.Создать();	
	СоответствиеИмпортируемыхОбластей = Новый Соответствие;
	
	ИмяЛистаЭксель = СокрЛП(ЭлектронныйДокумент.МакетИмпорта.ИмяЛиста);
	Если НЕ ЗначениеЗаполнено(ИмяЛистаЭксель) Тогда
		ИмяЛистаЭксель = "Лист1";///___мкском___Козлов Иван Витальевич___2020/08/13___№№.№№___ 1 	
	КонецЕсли; 
	
	//Преобразование ексель в табличный документ 
	ТД = Обработка.ЗагрузитьМетодом_NativeXLSX(ИмяФайлаВрем, ИмяЛистаЭксель, СоответствиеИмпортируемыхОбластей);
	
	//Получение данных из табличного документа 
	ПолучитьТаблицуЗначений(ЭлектронныйДокумент, ТД, СтруктураКэша);
	
	Попытка
		УдалитьФайлы(ИмяФайлаВрем);	
	Исключение
	КонецПопытки;  
КонецПроцедуры

Процедура ЗагрузитьДанныеИзВыбранногоФайла(ЭлектронныйДокумент, ФайлСсылка, СтруктураКэша) Экспорт
	//По выбранному файлу грузим данные 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭД_ВерсииФайловЭлектронныхДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЭД_ВерсииФайловЭлектронныхДокументов КАК ЭД_ВерсииФайловЭлектронныхДокументов
	|ГДЕ
	|	ЭД_ВерсииФайловЭлектронныхДокументов.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭД_ВерсииФайловЭлектронныхДокументов.ДатаВерсии УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭД_ХранилищеВерсийФайловЭД.Версия КАК Версия,
	|	ЭД_ХранилищеВерсийФайловЭД.ХранимыйФайл КАК ХранимыйФайл
	|ИЗ
	|	РегистрСведений.ЭД_ХранилищеВерсийФайловЭД КАК ЭД_ХранилищеВерсийФайловЭД
	|ГДЕ
	|	ЭД_ХранилищеВерсийФайловЭД.Версия В
	|			(ВЫБРАТЬ
	|				Таб.Ссылка
	|			ИЗ
	|				Версии КАК Таб)";
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДД = Выборка.ХранимыйФайл.Получить();	
		ЗагрузитьДанныеИзФайлаВЭлектронныйДокумент(ЭлектронныйДокумент, ФайлСсылка, СтруктураКэша, ДД);
	КонецЕсли; 
КонецПроцедуры

////Преобразование данных 

Процедура ПолучитьТаблицуЗначений(Ссылка, ТабДок, СтруктураКэша)
	//Преобразование значений табличного документа в кэш структуры отчета по макету
	///___мкском___Козлов Иван Витальевич___2020/08/14___№№.№№___1
	
	МакетИмпорта = Ссылка.МакетИмпорта.Макет.Получить();
	СтрокиДокумента = ПолучитьСтрокиДокумента(Ссылка);	
	Если СтрокиДокумента.Количество() = 0 Тогда
		//Для документов со строками 
		Возврат; 	
	КонецЕсли;
		
	//Найдем какие области надо загрузить
	СоответствиеЗагружаемыхОбластейИСтрок = Новый Соответствие;

	Для Каждого Строка Из СтрокиДокумента Цикл
		
		ТекОбласть = МакетИмпорта.Области.Найти(СокрЛП(Строка.Ключ));
		Если ТекОбласть <> Неопределено Тогда
			СоответствиеЗагружаемыхОбластейИСтрок.Вставить(СокрЛП(Строка.Ключ), МакетИмпорта.ПолучитьОбласть(СокрЛП(Строка.Ключ)));
		КонецЕсли;			
	КонецЦикла;
	
	//Обходим найденные области и проверяем каждую на наличие аналитик и показателей
	Для Каждого ТекСоответствие Из СоответствиеЗагружаемыхОбластейИСтрок Цикл
		
		//Строка документа
		ТекСтрокаДокумента = СтрокиДокумента.Получить(ТекСоответствие.Ключ);
		
		//Парамтеры импорта	
		ТаблицаПараметровИмпорта = Ссылка.МакетИмпорта.ПараметрыИмпортаСтрок;		
		ПараметрыИмпорта = ТаблицаПараметровИмпорта.Найти(ТекСтрокаДокумента, "СтрокаЭД");	
		Если ПараметрыИмпорта = Неопределено Тогда
			
			Продолжить;	
		КонецЕсли; 
		
		//Аналитики	
		АналитикиСтроки = Новый Соответствие;
		Для Каждого Аналитика Из ТекСтрокаДокумента.Аналитики.ВыгрузитьКолонку("Аналитика") Цикл
			АналитикиСтроки.Вставить(СокрЛП(Аналитика.Код), Аналитика);
		КонецЦикла;
		
		//Показатели
		ПоказателиСтроки = Новый Соответствие;
		ЗаполнитьСоответствиеПоказателейСроки(ТекСтрокаДокумента, ПоказателиСтроки);
		
		//Заполнение найденных областей аналитик и показателей
		ТекОбластьСтроки = ТекСоответствие.Значение;		
		СтруктураНайденныхАналитик = Новый Структура;
		СтруктураНайденныхПоказателей = Новый Структура;
		
		Для i = 1 По ТекОбластьСтроки.ШиринаТаблицы + 1 Цикл
			ТекОбласть = ТекОбластьСтроки.Область(1, i);
			
			ИмяАналитики = Лев(СокрЛП(ТекОбласть.Имя), СтрНайти(СокрЛП(ТекОбласть.Имя), "_")-1);
			Если АналитикиСтроки.Получить(СокрЛП(ИмяАналитики)) <> Неопределено Тогда
				СтруктураНайденныхАналитик.Вставить(СокрЛП(СтрЗаменить(ТекОбласть.Имя, ТекСоответствие.Ключ, "")), i);
			КонецЕсли;
			
			Если ПоказателиСтроки.Получить(СокрЛП(ТекОбласть.Имя)) <> Неопределено Тогда
				СтруктураНайденныхПоказателей.Вставить(СокрЛП(ТекОбласть.Имя), i);
			КонецЕсли;	
		КонецЦикла;
		
		//Добавление в копию кэша колонок. Каждый реквизит аналитики - новая колонка		
		ТаблицаКэша = СтруктураКэша[ТекСтрокаДокумента].Скопировать();
		ТаблицаКэша.Очистить();
		
		КС = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(255);
		Для Каждого ТекАналитика Из АналитикиСтроки Цикл
			
			КлючПолноеНаименование = ПолучитьБазовыйКлючРеквизитСинхронизации();
			
			Если ТекАналитика.Значение.НастройкаСинхронизации.Количество() = 0 Тогда
				//Если нет данных в ТЧ - синхронизировать по полному наименованию 
				
				ТаблицаКэша.Колонки.Добавить("Аналитика_"+ТекАналитика.Ключ+"_"+КлючПолноеНаименование, КС);
			Иначе
				Для Каждого ТекРеквизит Из ТекАналитика.Значение.НастройкаСинхронизации Цикл
					ТаблицаКэша.Колонки.Добавить("Аналитика_"+ТекАналитика.Ключ+"_"+ТекРеквизит.ИмяРеквизита, КС);
				КонецЦикла;
			КонецЕсли; 			
		КонецЦикла;
		
		//В зависимости от настроек импорта - определяем откуда читать данные	
		ПозицияНачала = 0;
		Если ЗначениеЗаполнено(ПараметрыИмпорта.ДанныеПервойСтроки) Тогда
			//Есть параметр начала поиска таблицы 
			
			КолонкаПоискаСтроки = ПараметрыИмпорта.НомерПревойКолонки;		
		    Если НЕ ЗначениеЗаполнено(КолонкаПоискаСтроки) Тогда
				КолонкаПоискаСтроки = 1;					
			КонецЕсли;
			
			Для Сч = 1 По ТабДок.ВысотаТаблицы Цикл
				СтрокаПроверки = ТабДок.Область(Сч, КолонкаПоискаСтроки).Текст;	
				
				Если ПараметрыИмпорта.ИгнорироватьРегистр Тогда
					
					Если Найти(НРег(СокрЛП(СтрокаПроверки)),НРег(СокрЛП(ПараметрыИмпорта.ДанныеПервойСтроки)))>0 Тогда
						ПозицияНачала = Сч;
						Прервать;	
					КонецЕсли;	
				Иначе
					Если Найти(СокрЛП(СтрокаПроверки),СокрЛП(ПараметрыИмпорта.ДанныеПервойСтроки))>0 Тогда
						ПозицияНачала = Сч;
						Прервать;	
					КонецЕсли; 
				КонецЕсли; 			 
			КонецЦикла;
			
			Если ПозицияНачала = 0 Тогда
				//Мы не нашли с чего начать. Ничего делть не будем 
				Продолжить;	
			КонецЕсли; 
			
			//От полученной позиции делаем сдвиг (он может быть и отрицательный)
			ПозицияНачала = ПозицияНачала + ПараметрыИмпорта.ИндексСмещенияПервойСтроки;
		Иначе
			//Жестко закрепляем начальную позицию
			ПозицияНачала = ПараметрыИмпорта.ИндексСмещенияПервойСтроки;
		КонецЕсли; 
		
		//Простая защита от коллизий
		Если ПозицияНачала <= 0 Тогда
			ПозицияНачала = 1;	
		КонецЕсли; 
		
		//Перебираем табдок. Заполняем кэш 
		НомерСтроки = 1;
		Для Сч = ПозицияНачала По ТабДок.ВысотаТаблицы Цикл					
			
			//Проверяем условие окончания поиска
			НомерПоследнейКолонки = 1;//по умолчанию 
			Если ЗначениеЗаполнено(ПараметрыИмпорта.НомерПоследнейКолонки) Тогда
				НомерПоследнейКолонки = ПараметрыИмпорта.НомерПоследнейКолонки;	
			КонецЕсли;
			
			СтрокаПроверки = ТабДок.Область(Сч, НомерПоследнейКолонки).Текст;
			Если ЗначениеЗаполнено(ПараметрыИмпорта.ДанныеПоследнейСтроки) Тогда
				//По строковому значению 
				
				Если ПараметрыИмпорта.ИгнорироватьРегистр Тогда
					Если Найти(НРег(СокрЛП(СтрокаПроверки)),НРег(СокрЛП(ПараметрыИмпорта.ДанныеПоследнейСтроки)))>0 Тогда
						Прервать;	
					КонецЕсли;	
				Иначе
					Если Найти(СокрЛП(СтрокаПроверки),СокрЛП(ПараметрыИмпорта.ДанныеПоследнейСтроки))>0 Тогда
						Прервать;	
					КонецЕсли;
				КонецЕсли; 		 						
			Иначе
				//По пустому значению 
				
				Если СокрЛП(СтрокаПроверки) = "" Тогда
					//Прерываться - если данных больше нет 
					Прервать;	
				КонецЕсли; 		
			КонецЕсли;									
			
		   	//Проверяем все значения в строке на предмет пустой строки 
			ВсеСтрокиПусты = Истина; 	
			Для Каждого ТекАналитика Из СтруктураНайденныхАналитик Цикл
				
				Область = ТабДок.Область(Сч,ТекАналитика.Значение);
				ТекЗначение = Область.Текст;
				
				Если ЗначениеЗаполнено(ТекЗначение) Тогда
					ВсеСтрокиПусты = Ложь	
				КонецЕсли; 
			КонецЦикла;
			
			Для Каждого ТекПоказатель Из СтруктураНайденныхПоказателей Цикл
				
				Область = ТабДок.Область(Сч,ТекПоказатель.Значение);		
				ТекЗначение = Область.Текст;
				
				Если ЗначениеЗаполнено(ТекЗначение) Тогда
					ВсеСтрокиПусты = Ложь	
				КонецЕсли; 
			КонецЦикла;
			
			//Пустые строки не добавлять 
			Если ВсеСтрокиПусты Тогда
				Продолжить;	
			КонецЕсли; 
			 
		    //Формируем кэш-таблицу
			НоваяСтрока = ТаблицаКэша.Добавить();
			НоваяСтрока.НомерСтрокиДанных = НомерСтроки;
			
			//Заполняем аналитики
			Для Каждого ТекАналитика Из СтруктураНайденныхАналитик Цикл
				
				Область = ТабДок.Область(Сч,ТекАналитика.Значение);	
				ТекЗначение = Область.Текст;		
				НоваяСтрока["Аналитика_"+ТекАналитика.Ключ] = ТекЗначение;	
			КонецЦикла;
			
			//Заполняем показатели в зависимости от типа 
			Для Каждого ТекПоказатель Из СтруктураНайденныхПоказателей Цикл
				
				Область = ТабДок.Область(Сч,ТекПоказатель.Значение);
				ТекЗначение = Область.Текст;
				
				ТипЗначенияПоказателя = ПоказателиСтроки.Получить(ТекПоказатель.Ключ).КолонкаЭД.ТипЗначения;
				
				Если ТипЗначенияПоказателя = Перечисления.ЭД_ТипыЗначений.Дата Тогда
					ТекЗначение = ЭД_СтроковыеФункцииКлиентСервер.Преобразование_ПолучитьДатуИзСтрокиПоСтандартнымФорматам(ТекЗначение);
					
				ИначеЕсли ТипЗначенияПоказателя = Перечисления.ЭД_ТипыЗначений.Булево Тогда 
					ТекЗначение = ЭД_СтроковыеФункцииКлиентСервер.Преобразование_ПолучитьБулевоИзСтроки(ТекЗначение);
					
				ИначеЕсли ТипЗначенияПоказателя = Перечисления.ЭД_ТипыЗначений.Строка Тогда	
					ТекЗначение = СокрЛП(Строка(ТекЗначение));							
				КонецЕсли; 
				
				НоваяСтрока[ТекПоказатель.Ключ] = ТекЗначение;								
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;									
		КонецЦикла;
		
		//Преобразование с заполнением реквизитов аналитик 
		ТрансформироватьВнешниеДанные(ТаблицаКэша, АналитикиСтроки);
		
		//Сохранение структуры кэша
		Если ТаблицаКэша.Количество() > 0 Тогда
			СтруктураКэша[ТекСтрокаДокумента].Очистить();
			Для Каждого ТекСтрока Из ТаблицаКэша Цикл
				НоваяСтрока = СтруктураКэша[ТекСтрокаДокумента].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;				
	КонецЦикла;			
КонецПроцедуры
 
Процедура ТрансформироватьВнешниеДанные(ТаблицаДанных, АналитикиСтроки)
	
	СписокАналитик = Новый СписокЗначений();
	Для Каждого Аналитика ИЗ АналитикиСтроки Цикл
		СписокАналитик.Добавить(Аналитика.Значение.ТипАналитики);
	КонецЦикла;	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_ЗначенияАналитик.ПолноеНаименование КАК ПолноеНаименование,
	|	МАКСИМУМ(ЭД_ЗначенияАналитик.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ЭД_ЗначенияАналитик КАК ЭД_ЗначенияАналитик
	|ГДЕ
	|	ЭД_ЗначенияАналитик.Владелец В(&СписокАналитик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭД_ЗначенияАналитик.ПолноеНаименование; 
	|
	|ВЫБРАТЬ";
	Запрос.УстановитьПараметр("СписокАналитик", СписокАналитик);
	
	МассивИменКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		МассивИменКолонок.Добавить("
		|	Данные." + Колонка.Имя);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрСоединить(МассивИменКолонок, ",");
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ТабДанные
	|ИЗ &ТаблицаДанных КАК Данные
	|;
	|ВЫБРАТЬ ";
	
	//Сначала отберем только показатели
	МассивИменКолонок.Очистить();
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если АналитикиСтроки.Получить(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивИменКолонок.Добавить("
		|	ТабДанные." + Колонка.Имя);
	КонецЦикла;
	
	//Теперь добавим в запрос имена колонок с аналитиками
	Для Каждого ТекАналитика Из АналитикиСтроки Цикл
	
		МассивИменКолонок.Добавить("
		|ЕСТЬNULL(Таблица_"+ТекАналитика.Ключ+".Ссылка,ЗНАЧЕНИЕ(Справочник.ЭД_ЗначенияАналитик.ПустаяСсылка)) КАК "+ТекАналитика.Ключ);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрСоединить(МассивИменКолонок, ",");	
	Запрос.Текст = Запрос.Текст + "
	|
	|ИЗ ТабДанные КАК ТабДанные";
	
	Для Каждого ТекАналитика Из АналитикиСтроки Цикл
		Запрос.Текст = Запрос.Текст + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК Таблица_"+ТекАналитика.Ключ+" ПО";
		
		///___мкском___Козлов Иван Витальевич___2020/08/12___Начало___№№.№№__
		///было. Не работало для нескольких имен реквизитов 
		
		//Для Каждого СтрокаРеквизит Из ТекАналитика.Значение.НастройкаСинхронизации Цикл
		//  	
		//  	Запрос.Текст = Запрос.Текст + "
		//  	|	ТабДанные.Аналитика_"+ТекАналитика.Ключ+"_"+СтрокаРеквизит.ИмяРеквизита+" = Таблица_"+ТекАналитика.Ключ+"."+СтрокаРеквизит.ИмяРеквизита;
		//  КонецЦикла;	
		
		///стало
		КлючПолноеНаименование = ПолучитьБазовыйКлючРеквизитСинхронизации();	
		МассивСтрокСинхронизации = ТекАналитика.Значение.НастройкаСинхронизации.НайтиСтроки(Новый Структура("Синхронизировать", Истина)); 
			
		Если МассивСтрокСинхронизации.Количество() = 0 Тогда
			//По-умолчанию синхронизация идёт по полному наименованию 
						
			Запрос.Текст = Запрос.Текст + "
			|	ТабДанные.Аналитика_" + ТекАналитика.Ключ + "_" + КлючПолноеНаименование + " = Таблица_" + ТекАналитика.Ключ + "." + КлючПолноеНаименование;
		Иначе
			//Если это не полное наименование - то брать соответствие по ссылке 
			//Если показателей несколько - условие "И"
			
			ЭтоПервыйПоказатель = Истина;		
			Для Каждого СтрокаРеквизит Из МассивСтрокСинхронизации Цикл
				
				Если СтрокаРеквизит.ИмяРеквизита = КлючПолноеНаименование Тогда
			        Запрос.Текст = Запрос.Текст + Символы.ПС + 
					?(ЭтоПервыйПоказатель,"","И ") + "ТабДанные.Аналитика_" + ТекАналитика.Ключ + "_" + КлючПолноеНаименование + " = Таблица_" + ТекАналитика.Ключ + "." + КлючПолноеНаименование;
				Иначе
					Запрос.Текст = Запрос.Текст + Символы.ПС + 
					?(ЭтоПервыйПоказатель,"","И ") + "ТабДанные.Аналитика_"+ТекАналитика.Ключ+"_"+СтрокаРеквизит.ИмяРеквизита+" = Таблица_"+ТекАналитика.Ключ+".Ссылка."+СтрокаРеквизит.ИмяРеквизита;
				КонецЕсли; 
				
				ЭтоПервыйПоказатель = Ложь;
			КонецЦикла;
		КонецЕсли; 
		
		///___мкском___Козлов Иван Витальевич___2020/08/12___Окончание___ 
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ТаблицаОбнаруженныхЗначений = Запрос.Выполнить().Выгрузить();
		
	///___мкском___Козлов Иван Витальевич___2020/08/12___Начало___№№.№№__1
	///было
	//СоответствиеАналитик = Новый Соответствие;
	//Для Каждого ТекАналитика Из АналитикиСтроки Цикл
	//	ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.НайтиПоКоду(ТекАналитика.Ключ);
	//	Для Каждого Строка Из ТаблицаДанных Цикл
	//		Если Строка[ТекАналитика.Ключ] = Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка() Тогда
	//			РеквизитСинхронизацииЭлемента = "";
	//			Для Каждого СтрокаРеквизит Из ТекАналитика.Значение.НастройкаСинхронизации Цикл
	//				РеквизитСинхронизацииЭлемента = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтрокаРеквизит.ИмяРеквизита];
	//			КонецЦикла;
	//			Если Не ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.ПустаяСсылка() Тогда
	//				
	//				НовыйЭлемент = Справочники.ЭД_ЗначенияАналитик.СоздатьЭлемент();
	//				НовыйЭлемент.Наименование = РеквизитСинхронизацииЭлемента; 
	//				НовыйЭлемент.ПолноеНаименование = РеквизитСинхронизацииЭлемента;
	//				НовыйЭлемент[СтрокаРеквизит.ИмяРеквизита] = РеквизитСинхронизацииЭлемента;
	//				НовыйЭлемент.Владелец = ВладелецНовогоЭлемента.ТипАналитики;
	//				СоответствиеАналитик.Вставить(РеквизитСинхронизацииЭлемента, НовыйЭлемент);
	//			КонецЕсли;
	//		КонецЕсли;	 
	//	КонецЦикла;
	//КонецЦикла;
	//		
	//Для Каждого ТекАналитика Из АналитикиСтроки Цикл
	//	ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.НайтиПоКоду(ТекАналитика.Ключ);
	//	Для Каждого Строка Из ТаблицаДанных Цикл
	//		Если Строка[ТекАналитика.Ключ] = Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка() Тогда
	//			РеквизитСинхронизацииЭлемента = "";
	//			Для Каждого СтрокаРеквизит Из ТекАналитика.Значение.НастройкаСинхронизации Цикл
	//				РеквизитСинхронизацииЭлемента = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтрокаРеквизит.ИмяРеквизита];
	//			КонецЦикла;
	//			Если Не ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.ПустаяСсылка() Тогда
	//				СоответствиеАналитик[РеквизитСинхронизацииЭлемента].Записать();
	//				Строка[ТекАналитика.Ключ] = СоответствиеАналитик[РеквизитСинхронизацииЭлемента];
	//			КонецЕсли;
	//		КонецЕсли;	 
	//	КонецЦикла;
	//КонецЦикла;

	///стало 
	ТаблицаСозданныхЗначенийАналитик = Новый ТаблицаЗначений;
	ТаблицаСозданныхЗначенийАналитик.Колонки.Добавить("ИменаРеквизитовСинхронизации", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	ТаблицаСозданныхЗначенийАналитик.Колонки.Добавить("МультиСтроковыеЗначенияРеквизитов", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	ТаблицаСозданныхЗначенийАналитик.Колонки.Добавить("ТипАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ЭД_ТипыАналитик"));
	ТаблицаСозданныхЗначенийАналитик.Колонки.Добавить("ЗначениеАналитикиСсылка", Новый ОписаниеТипов("СправочникСсылка.ЭД_ЗначенияАналитик"));
	
	Для Каждого ТекАналитика Из АналитикиСтроки Цикл	
		Для Каждого Строка Из ТаблицаОбнаруженныхЗначений Цикл
			
			МассивРеквизитовОбновления = ТекАналитика.Значение.НастройкаСинхронизации.НайтиСтроки(Новый Структура("Обновлять", Истина));
			
			МассивРеквизитовСинхронизации = ТекАналитика.Значение.НастройкаСинхронизации.НайтиСтроки(Новый Структура("Синхронизировать", Истина));		
			Если МассивРеквизитовСинхронизации.Количество() = 0 Тогда
				//Если нет настроек - синхронизировать по полному наименованию 	
				МассивРеквизитовСинхронизации = Новый Массив();
				МассивРеквизитовСинхронизации.Добавить(Новый Структура("ИмяРеквизита, Синхронизировать, Обновлять","ПолноеНаименование",Истина,Ложь));
			КонецЕсли; 
			
			НовыйЭлемент = Неопределено; 
			ТекущееЗначениеАналитики = Строка[ТекАналитика.Ключ];	
			Если ТекущееЗначениеАналитики = Справочники.ЭД_ЗначенияАналитик.ПустаяСсылка() Тогда
				//Нет такой аналитики - создать 
				
				ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.НайтиПоКоду(ТекАналитика.Ключ);		
				Если ВладелецНовогоЭлемента = Справочники.ЭД_Аналитики.ПустаяСсылка() Тогда
					Продолжить;	
				КонецЕсли; 
					
				ИменаРеквизитовСинхронизации = "";
				МультиСтроковыеЗначенияРеквизитов = "";				
				Для Каждого СтруктураРеквизитаСинхронизации Из МассивРеквизитовСинхронизации Цикл		
					
					ЗначениеРеквизитаСинхронизации = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтруктураРеквизитаСинхронизации.ИмяРеквизита];
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаСинхронизации) Тогда
						//А ещё задача - не делать пустые элементы 
						
						Продолжить;	
					КонецЕсли; 
					
					ИменаРеквизитовСинхронизации = ИменаРеквизитовСинхронизации + СтруктураРеквизитаСинхронизации.ИмяРеквизита + ",";
					МультиСтроковыеЗначенияРеквизитов =  МультиСтроковыеЗначенияРеквизитов + СокрЛП(Строка(ЗначениеРеквизитаСинхронизации)) + ",";				
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(МультиСтроковыеЗначенияРеквизитов) Тогда
					//Не создавать пустышки 
					Продолжить;		
				КонецЕсли; 
				
				//Наша задача не делать дубли в разрезе одного справочника
				МассивПоиска = ТаблицаСозданныхЗначенийАналитик.НайтиСтроки(
					Новый Структура(
						"ИменаРеквизитовСинхронизации, МультиСтроковыеЗначенияРеквизитов, ТипАналитики",
						ИменаРеквизитовСинхронизации, 
						МультиСтроковыеЗначенияРеквизитов,
						ВладелецНовогоЭлемента.ТипАналитики
					)
				);
				
				Если МассивПоиска.Количество() > 0 Тогда
					//Такая аналитика уже есть. Логику по обновлению пока делать не будем. 
					//Можно либо обновлять свойства либо нет 
					
					Строка[ТекАналитика.Ключ] = МассивПоиска[0].ЗначениеАналитикиСсылка; //Кэш
					Продолжить;	
				КонецЕсли; 

				//Можно смело добавить новое значение аналитики 
				
				НовыйЭлемент = Справочники.ЭД_ЗначенияАналитик.СоздатьЭлемент();
		       	НовыйЭлемент.Владелец = ВладелецНовогоЭлемента.ТипАналитики;
			        
				//Значения копируются в строгом соответсвии 	
				ПретендентНаНаименование = ""; 
				Для Каждого СтруктураРеквизитаСинхронизации Из МассивРеквизитовСинхронизации Цикл
					
					ЗначениеРеквизитаСинхронизации = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтруктураРеквизитаСинхронизации.ИмяРеквизита];
					
					Если НЕ ЗначениеЗаполнено(ПретендентНаНаименование)
						И ЗначениеЗаполнено(ЗначениеРеквизитаСинхронизации) 
						Тогда
						
						ПретендентНаНаименование = ЗначениеРеквизитаСинхронизации; 
					КонецЕсли; 
					
					Попытка
						НовыйЭлемент[СтруктураРеквизитаСинхронизации.ИмяРеквизита] = ЗначениеРеквизитаСинхронизации;	
					Исключение
					    ТекстОшибки = ОписаниеОшибки();
						ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					КонецПопытки; 				
				КонецЦикла;
						
				//Обновляемые реквизиты 
				Для Каждого СтруктураРеквизитаОбновления Из МассивРеквизитовОбновления Цикл
					
					ЗначениеРеквизитаОбновления = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтруктураРеквизитаОбновления.ИмяРеквизита];
								
					Попытка
						НовыйЭлемент[СтруктураРеквизитаОбновления.ИмяРеквизита] = ЗначениеРеквизитаОбновления;	
					Исключение
					    ТекстОшибки = ОписаниеОшибки();
						ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					КонецПопытки; 				
				КонецЦикла;		
						
				//Если наименование не заполнено - то заполнить первым не пустым реквизитом 
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ПолноеНаименование) Тогда
					НовыйЭлемент.ПолноеНаименование = ПретендентНаНаименование;	
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.Наименование) Тогда
					НовыйЭлемент.Наименование = НовыйЭлемент.ПолноеНаименование;	
				КонецЕсли;

				//Записать
				Попытка
					НовыйЭлемент.Записать();	
				Исключение
				    ТекстОшибки = ОписаниеОшибки();
					ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Продолжить;
				КонецПопытки;

				//Зафиксировать в таблице 		
				НовыйЭлементТаблицыПоиска = ТаблицаСозданныхЗначенийАналитик.Добавить();
				НовыйЭлементТаблицыПоиска.ИменаРеквизитовСинхронизации = ИменаРеквизитовСинхронизации;
				НовыйЭлементТаблицыПоиска.МультиСтроковыеЗначенияРеквизитов = МультиСтроковыеЗначенияРеквизитов;
				НовыйЭлементТаблицыПоиска.ТипАналитики = ВладелецНовогоЭлемента.ТипАналитики;
				НовыйЭлементТаблицыПоиска.ЗначениеАналитикиСсылка = НовыйЭлемент.Ссылка;
				
				//Сохранить в Кэш 		
				Строка[ТекАналитика.Ключ] = НовыйЭлемент.Ссылка; 
			Иначе
				//Обновить реквизиты 
				
				Если МассивРеквизитовОбновления.Количество() > 0  Тогда
					//В текущем значении
					НовыйЭлемент = ТекущееЗначениеАналитики.ПолучитьОбъект();	
					
					//По настройке 
					Для Каждого СтруктураРеквизитаОбновления Из МассивРеквизитовОбновления Цикл
						
						ЗначениеРеквизитаОбновления = Строка["Аналитика_" + ТекАналитика.Ключ+"_" + СтруктураРеквизитаОбновления.ИмяРеквизита];
									
						Попытка
							НовыйЭлемент[СтруктураРеквизитаОбновления.ИмяРеквизита] = ЗначениеРеквизитаОбновления;
							Если СтруктураРеквизитаОбновления.ИмяРеквизита = "ПолноеНаименование"  Тогда
								//Чтобы наимнование обновлялось вслед за полным 
								НовыйЭлемент.Наименование = "";	
							КонецЕсли; 
						Исключение
						    ТекстОшибки = ОписаниеОшибки();
							ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						КонецПопытки; 				
					КонецЦикла;
					
					Если НЕ ЗначениеЗаполнено(НовыйЭлемент.Наименование) Тогда
						НовыйЭлемент.Наименование = НовыйЭлемент.ПолноеНаименование;	
					КонецЕсли;
					
					//Записать
				 	Попытка
						НовыйЭлемент.Записать();	
					Исключение
					    ТекстОшибки = ОписаниеОшибки();
						ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					КонецПопытки;
				КонецЕсли; 		
			КонецЕсли;	 
		КонецЦикла;
	КонецЦикла;

	//Переопределение кэша
	ТаблицаДанных = ТаблицаОбнаруженныхЗначений;
	///___мкском___Козлов Иван Витальевич___2020/08/12___Окончание___ 
КонецПроцедуры

Функция ПолучитьСтрокиДокумента(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_Строки.Код КАК Код,
	|	ЭД_Строки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭД_Строки КАК ЭД_Строки
	|ГДЕ
	|	ЭД_Строки.Владелец = &Владелец
	|	И НЕ ЭД_Строки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Владелец", Ссылка.МодельЭД);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Соответствие = Новый Соответствие;
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Соответствие.Вставить(Выборка.Код, Выборка.Ссылка);
		КонецЦикла;
		Возврат Соответствие;
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСоответствиеПоказателейСроки(Строка, Показатели)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_Показатели.Код КАК Код,
	|	ЭД_Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭД_Показатели КАК ЭД_Показатели
	|ГДЕ
	|	ЭД_Показатели.Владелец = &Владелец
	|	И ЭД_Показатели.СтрокаЭД = &СтрокаЭД
	|	И НЕ ЭД_Показатели.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Строка.Владелец);
	Запрос.УстановитьПараметр("СтрокаЭД", Строка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Показатели.Вставить(Выборка.Код, Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьБазовыйКлючРеквизитСинхронизации()
	///___мкском___Козлов Иван Витальевич___2020/08/12___№№.№№___1 
	Возврат "ПолноеНаименование";		
КонецФункции

#КонецОбласти
//Конец//
////////////ПолучениеДанныхИзФайла 



////////////СозданиеФайла
//Начало//
#Область СозданиеФайла

Функция СоздатьФайл(ЭлектронныйДокумент, АдресДД, СтруктураФайла, ПризнакОшибки, СоздатьПринудительно = Ложь)Экспорт
	//Создает файл по структуре и двоичным данным 
	
	СтруктураПоследнейВерсии = ПолучитьПоследнююВерсиюФайлаЭД(ЭлектронныйДокумент, СтруктураФайла.Имя);
	Если СтруктураПоследнейВерсии = Неопределено Тогда
		//Нет версии - создать файл и его первую версию
		
		ТекстОшибки = "";
		
		Попытка
			СоздатьВерсиюФайла(ЭлектронныйДокумент, АдресДД, СтруктураФайла);	
		Исключение
		    ТекстОшибки = ОписаниеОшибки();
			ПризнакОшибки = "исключение";
		КонецПопытки; 

		Возврат ТекстОшибки;
	КонецЕсли; 
	
	Если СтруктураПоследнейВерсии.ВерсияСсылка.Размер = СтруктураФайла.Размер 
		И СтруктураПоследнейВерсии.ВерсияСсылка.ДатаИзмененияФайла = СтруктураФайла.ДатаИзмененияФайла 
		Тогда
		//Дубль 
		
		Если СоздатьПринудительно Тогда
			//Всёравно создать 
			
			ИзменятьДатыОказалосьЛишним = Истина;			
			//СтруктураФайла.ДатаИзмененияФайла = СтруктураФайла.ДатаИзмененияФайла + 1;	
		Иначе
			//Не создавать. Это предполагаемый дубль 
			
			ТекстОшибки = 
			"У загружаемого файла совпадает имя, размер и дата изменения. Такой файл уже есть в базе:" + Символы.ПС + 
			СтруктураПоследнейВерсии.ФайлСсылка + Символы.ПС + 
			СтруктураПоследнейВерсии.ВерсияСсылка + Символы.ПС + 
			"Выберите новый файл!";
			
			ПризнакОшибки = "дубль";
			
			Возврат ТекстОшибки;
		КонецЕсли; 
	КонецЕсли;
		
	//Новая версия файла
	ТекстОшибки = "";
	
	Попытка
		СоздатьВерсиюФайла(
			ЭлектронныйДокумент, 
			АдресДД, 
			СтруктураФайла, 
			СтруктураПоследнейВерсии.ФайлСсылка
		);	
	Исключение
	    ТекстОшибки = ОписаниеОшибки();
		ПризнакОшибки = "исключение";
	КонецПопытки; 

	Возврат ТекстОшибки;
КонецФункции

Функция ПолучитьТаблицуПоследнихВерсийФайловЭД(ЭлектронныйДокумент)Экспорт
	//Таблица всех файлов и их актуальных версий 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭД_ФайлыЭлектронныхДокументов.Ссылка КАК ФайлЭД,
	|	ЭД_ФайлыЭлектронныхДокументов.Наименование КАК ИмяФайла
	|ПОМЕСТИТЬ вт_ФайлыЭД
	|ИЗ
	|	Справочник.ЭД_ФайлыЭлектронныхДокументов КАК ЭД_ФайлыЭлектронныхДокументов
	|ГДЕ
	|	ЭД_ФайлыЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И НЕ ЭД_ФайлыЭлектронныхДокументов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ФайлыЭД.ФайлЭД КАК ФайлЭД,
	|	ЭД_ВерсииФайловЭлектронныхДокументов.Ссылка КАК ВерсияФайла,
	|	ЭД_ВерсииФайловЭлектронныхДокументов.ДатаВерсии КАК ДатаВерсии,
	|	вт_ФайлыЭД.ИмяФайла КАК ИмяФайла
	|ПОМЕСТИТЬ вт_ВсеВерсииКаждогоФайла
	|ИЗ
	|	Справочник.ЭД_ВерсииФайловЭлектронныхДокументов КАК ЭД_ВерсииФайловЭлектронныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ФайлыЭД КАК вт_ФайлыЭД
	|		ПО ЭД_ВерсииФайловЭлектронныхДокументов.Владелец = вт_ФайлыЭД.ФайлЭД
	|ГДЕ
	|	НЕ ЭД_ВерсииФайловЭлектронныхДокументов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВсеВерсииКаждогоФайла.ФайлЭД КАК ФайлЭД,
	|	МАКСИМУМ(вт_ВсеВерсииКаждогоФайла.ДатаВерсии) КАК ДатаВерсии
	|ПОМЕСТИТЬ вт_СрезПоследнихПоДатеВерсии
	|ИЗ
	|	вт_ВсеВерсииКаждогоФайла КАК вт_ВсеВерсииКаждогоФайла
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ВсеВерсииКаждогоФайла.ФайлЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ВсеВерсииКаждогоФайла.ИмяФайла КАК ИмяФайла,
	|	вт_ВсеВерсииКаждогоФайла.ФайлЭД КАК ФайлЭД,
	|	вт_ВсеВерсииКаждогоФайла.ВерсияФайла КАК ВерсияФайла,
	|	вт_ВсеВерсииКаждогоФайла.ДатаВерсии КАК ДатаВерсии
	|ИЗ
	|	вт_ВсеВерсииКаждогоФайла КАК вт_ВсеВерсииКаждогоФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СрезПоследнихПоДатеВерсии КАК вт_СрезПоследнихПоДатеВерсии
	|		ПО вт_ВсеВерсииКаждогоФайла.ФайлЭД = вт_СрезПоследнихПоДатеВерсии.ФайлЭД
	|			И вт_ВсеВерсииКаждогоФайла.ДатаВерсии = вт_СрезПоследнихПоДатеВерсии.ДатаВерсии";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат; 
КонецФункции
 
Функция ПолучитьПоследнююВерсиюФайлаЭД(ЭлектронныйДокумент, ИмяФайла)Экспорт
	//Получает последнюю версию файла ЭД, по имени файла  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭД_ФайлыЭлектронныхДокументов.Ссылка КАК ФайлСсылка,
	|	ЭД_ВерсииФайловЭлектронныхДокументов.Ссылка КАК ВерсияСсылка
	|ИЗ
	|	Справочник.ЭД_ФайлыЭлектронныхДокументов КАК ЭД_ФайлыЭлектронныхДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭД_ВерсииФайловЭлектронныхДокументов КАК ЭД_ВерсииФайловЭлектронныхДокументов
	|		ПО (ЭД_ВерсииФайловЭлектронныхДокументов.Владелец = ЭД_ФайлыЭлектронныхДокументов.Ссылка)
	|ГДЕ
	|	ЭД_ФайлыЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И ЭД_ФайлыЭлектронныхДокументов.Наименование = &ИмяФайла
	|	И ЭД_ВерсииФайловЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И НЕ ЭД_ВерсииФайловЭлектронныхДокументов.ПометкаУдаления
	|	И НЕ ЭД_ФайлыЭлектронныхДокументов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭД_ВерсииФайловЭлектронныхДокументов.ДатаВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВерсияСсылка) Тогда
			
			СтруктураРезультата = Новый Структура("ФайлСсылка, ВерсияСсылка");
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, ВыборкаДетальныеЗаписи);
			Возврат СтруктураРезультата;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура СоздатьВерсиюФайла(ЭлектронныйДокумент, АдресДД, Файл, ТекФайл = Неопределено)
	//Создание версии файла 	
	
	НоваяВерсия = Справочники.ЭД_ВерсииФайловЭлектронныхДокументов.СоздатьЭлемент();
	
	Если ЗначениеЗаполнено(ТекФайл) Тогда
		НоваяВерсия.Владелец = ТекФайл;
	Иначе
		НовыйФайл = Справочники.ЭД_ФайлыЭлектронныхДокументов.СоздатьЭлемент();
		НовыйФайл.Наименование = Файл.Имя;
		НовыйФайл.Расширение = Файл.Расширение;
		НовыйФайл.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НовыйФайл.ПолучитьСсылкуНового();
		НовыйФайл.Записать();
		
		НоваяВерсия.Владелец = НовыйФайл.Ссылка;
	КонецЕсли;
	НоваяВерсия.Наименование = Файл.Имя;
	НоваяВерсия.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяВерсия.ДатаИзмененияФайла = Файл.ДатаИзмененияФайла;
	НоваяВерсия.ДатаВерсии = ТекущаяДата();
	НоваяВерсия.ПолноеИмяФайла = Файл.ПолноеИмя;
	НоваяВерсия.Размер = Файл.Размер;
	НоваяВерсия.ПолучитьСсылкуНового();
	НоваяВерсия.Записать();
	
	НаборЗаписей = РегистрыСведений.ЭД_ХранилищеВерсийФайловЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(НоваяВерсия.Ссылка);
	НаборЗаписей.Очистить();
	
	ДД = ПолучитьИзВременногоХранилища(АдресДД);

	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Версия = НоваяВерсия.Ссылка;
	НоваяСтрока.ХранимыйФайл = Новый ХранилищеЗначения(ДД);
	
	НаборЗаписей.Записать();	
КонецПроцедуры

#КонецОбласти
//Конец//
////////////СозданиеФайла 
