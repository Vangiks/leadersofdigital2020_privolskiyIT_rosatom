////////////СобытияФормыСервер
//Начало//
#Область СобытияФормыСервер

////Создание 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура") Тогда
		Если Параметры.ДополнительныеПараметры.Свойство("Владелец") Тогда
			
			Объект.Владелец = Параметры.ДополнительныеПараметры.Владелец;			
		КонецЕсли;
	КонецЕсли;	 
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ТипЗнч(Объект.Ссылка.Макет.Получить()) = Тип("ТабличныйДокумент") Тогда
			Макет.Очистить();
			Макет.Вывести(Объект.Ссылка.Макет.Получить())
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДеревоАналитикИПоказателей();
	
	Элементы.ГруппаМенюПоказателей.Видимость = Ложь;
	Элементы.ОбновитьТаблицуРеквизитов.Видимость = Ложь;
	Элементы.УстановитьПометкуДобавленияПодсказки.Пометка = Истина;	
	Элементы.УстановитьПометкуДобавленияПодсказки.ЦветРамки = WebЦвета.ТемноСиний;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМакет;
	                                         
	УстановитьПараметрыКоманднойПанелиМакета(Элементы.ГруппаМакетНастройка.ПодчиненныеЭлементы);
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыКоманднойПанелиМакета(ПодчиненныеЭлементы = Неопределено)
	//Настройка макета. Причесывает командную панель  
	
	Если ПодчиненныеЭлементы = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
		
	Для каждого ТекЭлемент Из ПодчиненныеЭлементы Цикл
		
		Попытка
			ЕстьПодчиненные = (ТекЭлемент.ПодчиненныеЭлементы.Количество() > 0);
		Исключение
		    ТекстОшибки = ОписаниеОшибки();
			ЕстьПодчиненные = Ложь;
		КонецПопытки; 
			
		Если ЕстьПодчиненные Тогда
			УстановитьПараметрыКоманднойПанелиМакета(ТекЭлемент.ПодчиненныеЭлементы);	                    
		Иначе
			//Процедура установки 
			Попытка
				Если НЕ ТекЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели Тогда
					ТекЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
				КонецЕсли; 
				
				ТекЭлемент.Отображение = ОтображениеКнопки.Картинка;
			Исключение
			    ТекстОшибки = ОписаниеОшибки();
			КонецПопытки; 
		КонецЕсли; 
	КонецЦикла; 	
	 
	Возврат Неопределено;
КонецФункции
  

////Запись 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Проверки реквизитов 
	
	Если ТекущийОбъект.ПараметрыИмпортаСтрок.Количество() = 0 Тогда
		Отказ = Истина;
		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить параметры импорта строк!");	
	КонецЕсли; 
	
	////////////Редуцировано
	//Начало//
	#Область Редуцировано
	////Не давать записывать не верные настройки в строках 
	//Для каждого СтрокаИмпорта Из Объект.ПараметрыИмпортаСтрок Цикл
	//	
	//	Если ЗначениеЗаполнено(СтрокаИмпорта.НомерПоследнейКолонки) 
	//		И НЕ ЗначениеЗаполнено(СтрокаИмпорта.ДанныеПоследнейСтроки)
	//		Тогда
	//		
	//		Отказ = Истина;  
	//		ТекстСообщения = 
	//		"Ошибка в строке №" + СтрокаИмпорта.ПолучитьИдентификатор() + "в параметрах импорта." + Символы.ПС + 
	//		"Не заполнено поле """ + Элементы.ПараметрыИмпортаСтрокДанныеПоследнейСтроки.Заголовок + """";
	//		
	//		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	//	КонецЕсли; 
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаИмпорта.НомерПоследнейКолонки) 
	//		И ЗначениеЗаполнено(СтрокаИмпорта.ДанныеПоследнейСтроки)
	//		Тогда
	//		
	//		Отказ = Истина;  
	//		ТекстСообщения = 
	//		"Ошибка в строке №" + СтрокаИмпорта.ПолучитьИдентификатор() + "в параметрах импорта." + Символы.ПС + 
	//		"Не заполнено поле """ + Элементы.ПараметрыИмпортаСтрокКонец.Заголовок + """";
	//		
	//		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	//	КонецЕсли; 
	//	
	//	Если ЗначениеЗаполнено(СтрокаИмпорта.НомерПревойКолонки) 
	//		И НЕ ЗначениеЗаполнено(СтрокаИмпорта.ДанныеПервойСтроки)
	//		Тогда
	//		
	//		Отказ = Истина;  
	//		ТекстСообщения = 
	//		"Ошибка в строке №" + СтрокаИмпорта.ПолучитьИдентификатор() + "в параметрах импорта." + Символы.ПС + 
	//		"Не заполнено поле """ + Элементы.ПараметрыИмпортаСтрокДанныеПервойСтроки.Заголовок + """";
	//		
	//		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	//	КонецЕсли; 
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаИмпорта.НомерПревойКолонки) 
	//		И ЗначениеЗаполнено(СтрокаИмпорта.ДанныеПервойСтроки)
	//		Тогда
	//		
	//		Отказ = Истина;  
	//		ТекстСообщения = 
	//		"Ошибка в строке №" + СтрокаИмпорта.ПолучитьИдентификатор() + "в параметрах импорта." + Символы.ПС + 
	//		"Не заполнено поле """ + Элементы.ПараметрыИмпортаСтрокНомерПревойКолонки.Заголовок + """";
	//		
	//		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	//	КонецЕсли; 
	//КонецЦикла; 
	#КонецОбласти
	//Конец//
	////////////Редуцировано 
	
	Если НЕ Отказ Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("МакетИмпорта", Макет);	
	КонецЕсли; 
КонецПроцедуры

////Обновление покзаателей 

&НаСервере
Процедура ОбновитьДеревоАналитикИПоказателей()
	//Обновить дерево строк, их показателей и аналитик 
	
	ЭдДерево = ЭтаФорма.РеквизитФормыВЗначение("ДеревоАналитикИПоказателей");
    ЭдДерево.Строки.Очистить();
    ЭтаФорма.ЗначениеВРеквизитФормы(ЭдДерево, "ДеревоАналитикИПоказателей");
	
	ЭдДерево = ПолучитьДеревоЗначенийПоказателейПоМоделиЭД(Объект.Владелец);
	ЭтаФорма.ЗначениеВРеквизитФормы(ЭдДерево, "ДеревоАналитикИПоказателей");
КонецПроцедуры
 
&НаСервере
Функция ПолучитьДеревоЗначенийПоказателейПоМоделиЭД(МодельЭД)
	//Создаем дерево значений с показателями и аналитиками 	
	
	ТаблицаПроверкиПоказателей.Очистить();
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Строки"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Аналитики"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭД_Показатели"));
	МассивТипов.Добавить(Тип("Строка"));
	
	ЭдДерево = Новый ДеревоЗначений();	
	ЭдДерево.Колонки.Добавить("ПолеСсылка", Новый ОписаниеТипов(МассивТипов,,,,Новый КвалификаторыСтроки(100))); 	
	ЭдДерево.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ЭдДерево.Колонки.Добавить("ТипПоля", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(30)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникЭД_Строки.Ссылка КАК СтрокаЭД,
		|	ЭД_СтрокиАналитики.Аналитика КАК АналитикаЭД
		|ПОМЕСТИТЬ вт_АналитикиСтрок
		|ИЗ
		|	Справочник.ЭД_Строки КАК СправочникЭД_Строки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭД_Строки.Аналитики КАК ЭД_СтрокиАналитики
		|		ПО СправочникЭД_Строки.Ссылка = ЭД_СтрокиАналитики.Ссылка
		|ГДЕ
		|	СправочникЭД_Строки.Владелец = &МодельЭД
		|	И НЕ СправочникЭД_Строки.ПометкаУдаления
		|	И НЕ ЭД_СтрокиАналитики.Аналитика = &ПустаяСсылкаАналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникЭД_Показатели.Ссылка КАК ПоказательЭД,
		|	СправочникЭД_Показатели.СтрокаЭД КАК СтрокаЭД
		|ПОМЕСТИТЬ вт_ВсеПоказателиПоСтрокам
		|ИЗ
		|	Справочник.ЭД_Показатели КАК СправочникЭД_Показатели
		|ГДЕ
		|	СправочникЭД_Показатели.Владелец = &МодельЭД
		|	И НЕ СправочникЭД_Показатели.ПометкаУдаления
		|	И НЕ СправочникЭД_Показатели.СтрокаЭД = &ПустаяСсылкаСтрокаЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_АналитикиСтрок.СтрокаЭД КАК СтрокаЭД,
		|	вт_АналитикиСтрок.АналитикаЭД КАК ДанныеСсылка,
		|	""аналитика"" КАК ВидДанных
		|ИЗ
		|	вт_АналитикиСтрок КАК вт_АналитикиСтрок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт_ВсеПоказателиПоСтрокам.СтрокаЭД,
		|	вт_ВсеПоказателиПоСтрокам.ПоказательЭД,
		|	""показатель""
		|ИЗ
		|	вт_ВсеПоказателиПоСтрокам КАК вт_ВсеПоказателиПоСтрокам
		|ИТОГИ ПО
		|	СтрокаЭД";
	
	Запрос.УстановитьПараметр("МодельЭД", МодельЭД);
	Запрос.УстановитьПараметр("ПустаяСсылкаАналитика", Справочники.ЭД_Аналитики.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСтрокаЭД", Справочники.ЭД_Строки.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаСтрокаЭД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаСтрокаЭД.Следующий() Цикл
		//Построение дерева 
		
		СтрокаЭД = ВыборкаСтрокаЭД.СтрокаЭД;
		
		НоваяСтрока = ЭдДерево.Строки.Добавить();
		НоваяСтрока.ПолеСсылка = СтрокаЭД;
		НоваяСтрока.Код = СокрЛП(СтрокаЭД.Код);
		НоваяСтрока.ТипПоля = "строка";
		НовыйВладелец = НоваяСтрока.Строки;
					
		ВыборкаДетальныеЗаписи = ВыборкаСтрокаЭД.Выбрать();
			
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ВложеннаяСтрока = НовыйВладелец.Добавить();	
			ВложеннаяСтрока.ПолеСсылка = ВыборкаДетальныеЗаписи.ДанныеСсылка;
			ВложеннаяСтрока.Код = СокрЛП(ВыборкаДетальныеЗаписи.ДанныеСсылка.Код);
			
			Если ВыборкаДетальныеЗаписи.ВидДанных = "аналитика" Тогда
				ВложеннаяСтрока.ТипПоля = "аналитика";
			Иначе
				ВложеннаяСтрока.ТипПоля = "показатель";
			КонецЕсли; 
					
			ВложенныйВладелец = ВложеннаяСтрока.Строки;		
			Если ВыборкаДетальныеЗаписи.ВидДанных = "аналитика" Тогда
			
				АналитикаТекущая = ВыборкаДетальныеЗаписи.ДанныеСсылка;
				РеквизитыСинхронизации = АналитикаТекущая.НастройкаСинхронизации.НайтиСтроки(Новый Структура("Синхронизировать", Истина));		
				РеквизитыОбновления = АналитикаТекущая.НастройкаСинхронизации.НайтиСтроки(Новый Структура("Обновлять", Истина));
				
				Для каждого РеквизитДанные Из РеквизитыСинхронизации Цикл
					ВложенныйРеквизитСинхронизации = ВложенныйВладелец.Добавить();
					ВложенныйРеквизитСинхронизации.ПолеСсылка = РеквизитДанные.ИмяРеквизита;
					ВложенныйРеквизитСинхронизации.Код = "синхронизация";
					ВложенныйРеквизитСинхронизации.ТипПоля = "реквизит аналитики";
					
					КодВставки = ""+СокрЛП(АналитикаТекущая.Код)+"_"+СокрЛП(РеквизитДанные.ИмяРеквизита)+СокрЛП(СтрокаЭД.Код);
					
					ДобавитьПоказательПоиска(
						АналитикаТекущая, 
						КодВставки, 
						"" + КодВставки + "|S|" + Строка(АналитикаТекущая),
						СтрокаЭД,
						"аналитика_синхронизация"
					);
				КонецЦикла; 
				
				Для каждого РеквизитДанные Из РеквизитыОбновления Цикл
					ВложенныйРеквизитОбновления = ВложенныйВладелец.Добавить();
					ВложенныйРеквизитОбновления.ПолеСсылка = РеквизитДанные.ИмяРеквизита;
					ВложенныйРеквизитОбновления.Код = "обновление";
					ВложенныйРеквизитОбновления.ТипПоля = "реквизит аналитики";
					
					КодВставки = ""+СокрЛП(АналитикаТекущая.Код)+"_"+СокрЛП(РеквизитДанные.ИмяРеквизита)+СокрЛП(СтрокаЭД.Код);
					ДобавитьПоказательПоиска(
						АналитикаТекущая, 
						КодВставки, 
						"" + КодВставки + "|R|" + Строка(АналитикаТекущая),
						СтрокаЭД,
						"аналитика_обновление"
					);
				КонецЦикла;
			Иначе
				//Показатель
				КодВставки = СокрЛП(ВыборкаДетальныеЗаписи.ДанныеСсылка.Код);
				
				ТипПоказателя = "";		
				ТипКолонки = ВыборкаДетальныеЗаписи.ДанныеСсылка.КолонкаЭД.ТипЗначения;			
				Если ТипКолонки = Перечисления.ЭД_ТипыЗначений.Число 
					ИЛИ НЕ ЗначениеЗаполнено(ТипКолонки)
					Тогда
					
					ТипПоказателя = "число";
				Иначе
					ТипПоказателя = НРег(Строка(ТипКолонки));
				КонецЕсли; 
				
				ДобавитьПоказательПоиска(
					ВыборкаДетальныеЗаписи.ДанныеСсылка, 
					КодВставки, 
					"" + КодВставки + "|" + Строка(ВыборкаДетальныеЗаписи.ДанныеСсылка),
					СтрокаЭД,
					ТипПоказателя
				);	
			КонецЕсли; 		
		КонецЦикла;
	КонецЦикла;
		
	Возврат ЭдДерево;	
КонецФункции

&НаСервере
Процедура ДобавитьПоказательПоиска(ПолеСсылка, КодВставкиПоля, ПредставлениеВСписке, СтрокаЭД, ТипПоказателя)
	//Для проверки 
	
	НоваяСтрокаПоказателя = ТаблицаПроверкиПоказателей.Добавить();
	НоваяСтрокаПоказателя.КодВставкиПоля = КодВставкиПоля;
	НоваяСтрокаПоказателя.ПолеСсылка = ПолеСсылка;
	НоваяСтрокаПоказателя.ПредставлениеВСписке = ПредставлениеВСписке;
	НоваяСтрокаПоказателя.СтрокаЭД = СтрокаЭД;
	НоваяСтрокаПоказателя.КодСтроки = СтрокаЭД.Код;
	НоваяСтрокаПоказателя.ТипПоказателя = ТипПоказателя;
КонецПроцедуры
 
#КонецОбласти
//Конец//
////////////СобытияФормыСервер 



////////////СобытияФормыКлиент
//Начало//
#Область СобытияФормыКлиент


////////////СтандартныеСобытия
//Начало//
#Область СтандартныеСобытия

////Открытие 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнитьПроверкуОбластейИУдалениеЛишних();
КонецПроцедуры

////Запись

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ВыполнитьПроверкуОбластейИУдалениеЛишних();
КонецПроцедуры

////Обработка оповещения 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПроизошлоИзменениеРеквизитаСинхронизации" Тогда
		//Обновить структуру
		ОбновитьДеревоАналитикИПоказателей();
		
		//Удалить области,которые были удалены в настройках
		ВыполнитьПроверкуОбластейИУдалениеЛишних();	
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
//Конец//
////////////СтандартныеСобытия 


////////////ДеревоАналитикИПоказателей
//Начало//
#Область ДеревоАналитикИПоказателей
		
////Перетаскивание 

&НаКлиенте
Процедура ДеревоАналитикИПоказателейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	//Перетаскивание элемента. Начало 
	
	ТекДанные = Элементы.ДеревоАналитикИПоказателей.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ТипЗнч(ТекДанные.ПолеСсылка) = Тип("СправочникСсылка.ЭД_Аналитики") Тогда
		//Нельзя пертянуть аналитику. Только по реквизитам синхронизации 
		
		Выполнение = Ложь; 
		
		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя перетаскивать аналитику целиком. Каждый реквизит аналитики перетаскивается отдельно!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАналитикИПоказателейОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	//Оконччание перетаскивания. Поместить в таб док в область
	ТекДанные = Элементы.ДеревоАналитикИПоказателей.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекОбласть = Макет.ТекущаяОбласть;
	Если ТекОбласть = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекОбласть.Текст = "";	
	Если ТипЗнч(ТекДанные.ПолеСсылка) = Тип("СправочникСсылка.ЭД_Строки") Тогда 
		//Назначить строку	
		ВыполнитьВставкуКодаСтроки(Макет, ТекДанные.ПолеСсылка, ТекДанные.Код, Истина);
				
	ИначеЕсли ТипЗнч(ТекДанные.ПолеСсылка) = Тип("СправочникСсылка.ЭД_Показатели") Тогда 
		//Назначить показатель
		
		СтрокаЭД = ТекДанные.ПолучитьРодителя(); 		
		КодВставкиПоля = ТекДанные.Код;	
		
		ЦветФонаПоказателя = Неопределено;
		МассивПоиска = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодВставкиПоля, КодСтроки", КодВставкиПоля, СтрокаЭД.Код));		
		Если МассивПоиска.Количество() > 0 Тогда
			
			ЦветФонаПоказателя =  ПолучитьЦветПоТипуПоказателя(МассивПоиска[0].ТипПоказателя);
		КонецЕсли; 
		
		ВыполнитьВставкуКодаПоказателяАналитики(
			Макет, 
			СтрокаЭД.ПолеСсылка, 
			СтрокаЭД.Код, 
			ТекДанные.ПолеСсылка, 
			КодВставкиПоля,
			ЦветФонаПоказателя
		);
				
	ИначеЕсли ТипЗнч(ТекДанные.ПолеСсылка) = Тип("Строка") Тогда
		//Назначить реквизит аналитики 
		
		СтрокаЭД = ТекДанные.ПолучитьРодителя().ПолучитьРодителя();
		АналитикаЭД = ТекДанные.ПолучитьРодителя();	
		РеквизитАналитики = ТекДанные.ПолеСсылка;	
			
		КодВставкиПоля = ""+СокрЛП(АналитикаЭД.Код)+"_"+СокрЛП(РеквизитАналитики)+СокрЛП(СтрокаЭД.Код);	
		
		ЦветФонаПоказателя = Неопределено;
		МассивПоиска = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодВставкиПоля, КодСтроки", КодВставкиПоля, СтрокаЭД.Код));		
		Если МассивПоиска.Количество() > 0 Тогда
			
			ЦветФонаПоказателя =  ПолучитьЦветПоТипуПоказателя(МассивПоиска[0].ТипПоказателя);
		КонецЕсли; 		
		
		ВыполнитьВставкуКодаПоказателяАналитики(
			Макет, 
			СтрокаЭД.ПолеСсылка, 
			СтрокаЭД.Код, 
			АналитикаЭД.ПолеСсылка, 
			КодВставкиПоля,
			ЦветФонаПоказателя
		);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЦветПоТипуПоказателя(ТипПоказателя)
	//Раскрашивание ячеек 
	
	ЦветРезуьтат = Неопределено;
	
	Если ТипПоказателя = "число" Тогда
		ЦветРезуьтат = WebЦвета.Хаки;	
		
	ИначеЕсли ТипПоказателя = "булево" Тогда 
		ЦветРезуьтат = WebЦвета.Хаки;
		
	ИначеЕсли ТипПоказателя = "строка" Тогда
		ЦветРезуьтат = WebЦвета.Хаки;
		
	ИначеЕсли ТипПоказателя = "дата" Тогда
		ЦветРезуьтат = WebЦвета.Хаки;
		
	ИначеЕсли ТипПоказателя = "аналитика_синхронизация" Тогда
		ЦветРезуьтат = WebЦвета.БледноЗеленый;
		
	ИначеЕсли ТипПоказателя = "аналитика_обновление" Тогда
		ЦветРезуьтат = WebЦвета.БледноБирюзовый;	
	КонецЕсли;
	
	Возврат ЦветРезуьтат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьВставкуКодаСтроки(МакетТабДок, СтрокаЭД, КодСтроки, Отказ)
	//Имя области строки должно совпадать с кодом строки 
	
	ОбластьДубликат = МакетТабДок.Области.Найти(КодСтроки);	
	Если НЕ ОбластьДубликат = Неопределено Тогда
		
		ТекстСообщения = 
		"Строка """ + Строка(СтрокаЭД) + """ с кодом """ + КодСтроки + """уже располагается на уровне №" + ОбластьДубликат.Верх;
		
		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли; 	
		
	ОбластьСтрока = МакетТабДок.Область("R"+Формат(МакетТабДок.ТекущаяОбласть.Верх, "ЧГ="));
	ОбластьСтрока.Имя = КодСтроки;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВставкуКодаПоказателяАналитики(МакетТабДок, СтрокаЭД, КодСтроки, ДанныеСсылка, КодДанных, ЦветФона = Неопределено)
	//Имя области строки должно совпадать с кодом строки 
	ТекОбласть = МакетТабДок.ТекущаяОбласть;
	НомерСтроки = ТекОбласть.Верх;
	НомерКолонки = ТекОбласть.Лево;
	
	ОбластьСтрока = МакетТабДок.Область("R"+Формат(НомерСтроки,"ЧГ="));	
	Если ОбластьСтрока.Имя = КодСтроки Тогда
		//Проверить на дубликаты 
		Для Итератор = 1 По МакетТабДок.ШиринаТаблицы Цикл
			
			ОбластьПроверки = МакетТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C" + Формат(Итератор,"ЧГ="));
			Если ОбластьПроверки.Имя = КодДанных Тогда
				
				ТекстСообщения = 
				"Поле """ + Строка(ДанныеСсылка) + """ с кодом """ + КодДанных + """ уже существует в колонке №" + ОбластьПроверки.Лево + ", строке №" + ОбластьПроверки.Верх;
				
				ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				МакетТабДок.ТекущаяОбласть = ОбластьПроверки;		
				
				Возврат;
			КонецЕсли; 		
		КонецЦикла; 	
	Иначе
		//Если строки нет - создать
		Отказ = Ложь;
		ВыполнитьВставкуКодаСтроки(МакетТабДок, СтрокаЭД, КодСтроки, Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли; 
	КонецЕсли;
	
	//Присвоить имя
	ТекОбласть.Имя = КодДанных;
	ТекОбласть.Текст = "";
	
	//Установить цвет 
	Если НЕ ЦветФона = Неопределено Тогда
		ТекОбласть.ЦветФона = ЦветФона;
	КонецЕсли; 
	
	//Создать комментарий подсказку 
	Если НЕ Элементы.УстановитьПометкуДобавленияПодсказки.Пометка Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НомерСтроки = 1 Тогда
		НомерСтрокиПодсказки = 2;
	Иначе
		НомерСтрокиПодсказки = НомерСтроки-1;
	КонецЕсли; 
	
	ОбластьСтрокиПодсказки = МакетТабДок.Область("R"+Формат(НомерСтрокиПодсказки,"ЧГ="));
	МассивПоиска = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки", ОбластьСтрокиПодсказки.Имя));
	Если НЕ МассивПоиска.Количество() = 0 Тогда
		//Мягкая логика - если строка уже занята - подсказку не делаем.
		Возврат;	
	КонецЕсли; 

	ОблстьПодсказки  = МакетТабДок.Область("R"+Формат(НомерСтрокиПодсказки,"ЧГ=")+"C" + Формат(НомерКолонки,"ЧГ="));	
	ОблстьПодсказки.Текст = Строка(ДанныеСсылка);
КонецПроцедуры

////Редактирование 

&НаКлиенте
Процедура ДеревоАналитикИПоказателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Открывать значения 
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ДеревоАналитикИПоказателей.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 

	Если ТипЗнч(ТекДанные.ПолеСсылка) = Тип("Строка") Тогда
		ЗначениеНаОткрытие = ТекДанные.ПолучитьРодителя().ПолеСсылка;
	Иначе
		ЗначениеНаОткрытие = ТекДанные.ПолеСсылка;
	КонецЕсли; 
	
	ОткрытьЗначение(ЗначениеНаОткрытие);
КонецПроцедуры

#КонецОбласти
//Конец//
////////////ДеревоАналитикИПоказателей


////////////ТабличныйДокументМакет
//Начало//
#Область ТабличныйДокументМакет

&НаКлиенте
Процедура МакетВыбор(Элемент, Область, СтандартнаяОбработка)
	//Редактировать имя. Выпадающий список для замены  
		
	НомерСтроки = Область.Верх;	
	ОбластьСтрока = Макет.Область("R"+Формат(НомерСтроки,"ЧГ="));		
	МассивПоиска = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки", ОбластьСтрока.Имя));
	
	Если МассивПоиска.Количество() > 0 Тогда
			
		СтандартнаяОбработка = Ложь;
		
		СписокВыбораРеквизитов = Новый СписокЗначений();
		
		//Возможность удалить показатель
		МассивПоискаЗначения = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки, КодВставкиПоля", ОбластьСтрока.Имя, Область.Имя));
		Если МассивПоискаЗначения.Количество() > 0 Тогда
			СписокВыбораРеквизитов.Добавить("удалить_показатель", "!Удалить показаетль!");	
		КонецЕсли; 
		
		//Возможность удалить строку
		СписокВыбораРеквизитов.Добавить("удалить_строку", "!Удалить строку""" + ОбластьСтрока.Имя + """!");	
		
		////Только новые элементы 
		МассивУжеДобавленныхПолей = Новый Массив(); 
		
		Для Итератор = 1 По Макет.ШиринаТаблицы Цикл
			
			ОбластьПроверки = Макет.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C" + Формат(Итератор,"ЧГ="));
			МассивПоискаПолей = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки, КодВставкиПоля", ОбластьСтрока.Имя, ОбластьПроверки.Имя));
	
			Если МассивПоискаПолей.Количество() > 0 Тогда
				
	         	Если МассивУжеДобавленныхПолей.Найти(ОбластьПроверки.Имя) = Неопределено Тогда
					МассивУжеДобавленныхПолей.Добавить(ОбластьПроверки.Имя);		
				КонецЕсли; 			
			КонецЕсли; 		
		КонецЦикла; 	
					
		Для каждого ПоказательДанные Из МассивПоиска Цикл
			
			Если МассивУжеДобавленныхПолей.Найти(ПоказательДанные.КодВставкиПоля) = Неопределено Тогда
				СписокВыбораРеквизитов.Добавить(ПоказательДанные, ПоказательДанные.ПредставлениеВСписке);	
			КонецЕсли; 	
		КонецЦикла;
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыполнитьПослеВыбораПоказателя",ЭтаФорма),СписокВыбораРеквизитов,Элемент);		
	Иначе
		//Вставить строку
		
		Если ЗначениеЗаполнено(Область.Текст) Тогда
			///Если просто текст - то просто текст 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;

		СписокВыбораСтрок = Новый СписокЗначений();
		СписокВыбораСтрок.Добавить(Неопределено, "!Ввод комментария!"); 
				
		Для каждого ДанныеПоказателя Из ТаблицаПроверкиПоказателей Цикл
			
			ОбластьМакета = Макет.Области.Найти(ДанныеПоказателя.КодСтроки);
			Если ОбластьМакета = Неопределено Тогда
				
				Если СписокВыбораСтрок.НайтиПоЗначению(ДанныеПоказателя.КодСтроки) = Неопределено Тогда
					СписокВыбораСтрок.Добавить(ДанныеПоказателя.КодСтроки, "" + ДанныеПоказателя.КодСтроки + "|" + Строка(ДанныеПоказателя.СтрокаЭД))	
				КонецЕсли; 	
			КонецЕсли; 		
		КонецЦикла; 
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыполнитьПослеВыбораСтроки",ЭтаФорма,Новый Структура("НомерСтроки", НомерСтроки)),СписокВыбораСтрок,Элемент);	 	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПослеВыбораПоказателя(Результат, ПараметрыОповещения) Экспорт
    //После выбора нового показателя
	
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;	

	ТекДанные = Результат.Значение;		
	Если ТекДанные = "удалить_показатель" Тогда
		//ОЧИСТКА ПОКАЗАТЕЛЯ 
		
		Макет.ТекущаяОбласть.Имя = "";
		Макет.ТекущаяОбласть.ЦветФона = Новый Цвет();
		Возврат;
		
	ИначеЕсли ТекДанные = "удалить_строку" Тогда 		
		//ОЧИСТКА СТРОКИ 
		
		НомерСтроки = Макет.ТекущаяОбласть.Верх;	
		ОбластьСтрока = Макет.Область("R"+Формат(НомерСтроки,"ЧГ="));	
		ОбластьСтрока.Имя = "";
		
		//Почистить всё остальное 		
		Для ИтераторX = 1 По Макет.ШиринаТаблицы Цикл
			ОбластьОчистки = Макет.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C" + Формат(ИтераторX,"ЧГ="));	
			ОбластьОчистки.ЦветФона = Новый Цвет();
			ОбластьОчистки.Имя = "";
			Попытка
				ОбластьОчистки.Текст = "";	
			Исключение
			КонецПопытки; 			
		КонецЦикла;
		
		Возврат;
	КонецЕсли; 
	
	ЦветФонаПоказателя = ПолучитьЦветПоТипуПоказателя(ТекДанные.ТипПоказателя);	
	ВыполнитьВставкуКодаПоказателяАналитики(
		Макет, 
		ТекДанные.СтрокаЭД, 
		ТекДанные.КодСтроки, 
		ТекДанные.ПолеСсылка, 
		ТекДанные.КодВставкиПоля,
		ЦветФонаПоказателя
	);
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПослеВыбораСтроки(Результат, ПараметрыОповещения) Экспорт
    //После выбора новой строки
	
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;	

	КодСтроки = Результат.Значение;		
	Если КодСтроки = Неопределено Тогда
		Макет.ТекущаяОбласть.Текст = "Введите комментарий";
		Возврат;
	КонецЕсли; 
	
	МассивДанныхПоСтроке = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки", КодСтроки));

	Отказ = Ложь;
	ВыполнитьВставкуКодаСтроки(Макет,МассивДанныхПоСтроке[0].СтрокаЭД, КодСтроки, Отказ);	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПроверкуОбластейИУдалениеЛишних()
	//Проверить области 
	
	Для каждого ОбластьПроверки Из Макет.Области Цикл
		
		НомерСтроки = ОбластьПроверки.Верх;
		ОбластьСтрока = Макет.Область("R"+Формат(НомерСтроки,"ЧГ="));
		
		МассивПоискаСтроки = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки", ОбластьСтрока.Имя));
		Если МассивПоискаСтроки.Количество() = 0 Тогда
			//Нет строки 
			ОбластьСтрока.Имя = "";
			
			//Почистить всё остальное 		
			Для ИтераторX = 1 По Макет.ШиринаТаблицы Цикл
				ОбластьОчистки = Макет.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C" + Формат(ИтераторX,"ЧГ="));		
				ОбластьОчистки.ЦветФона = Новый Цвет();		
				ОбластьОчистки.Имя = "";
				Попытка
					ОбластьОчистки.Текст = "";	
				Исключение
				КонецПопытки; 			
			КонецЦикла; 	
		Иначе
			//Есть строка
			Если ОбластьСтрока.Имя = ОбластьПроверки.Имя Тогда
				//Проверяется строка, она уже есть. Ничего не делать 
				Продолжить;
			КонецЕсли; 
			
			МассивПоискаПоказателя = ТаблицаПроверкиПоказателей.НайтиСтроки(Новый Структура("КодСтроки, КодВставкиПоля", ОбластьСтрока.Имя, ОбластьПроверки.Имя));		
			Если МассивПоискаПоказателя.Количество() = 0 Тогда
											
				ОбластьПроверки.ЦветФона = Новый Цвет();	
				ОбластьПроверки.Имя = "";
				Попытка
					ОбластьПроверки.Текст = "";	
				Исключение
				КонецПопытки; 			
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 
#КонецОбласти
//Конец//
////////////ТабличныйДокументМакет 


////////////ПанельУправленияМакетом
//Начало//
#Область ПанельУправленияМакетом

&НаКлиенте
Процедура ОбновитьТаблицуРеквизитов(Команда)
	ОбновитьДеревоАналитикИПоказателей();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗначениеИмениОбласти(Команда)
	//Удаление областей 
	
	Для каждого ВыделОбласть Из Макет.ВыделенныеОбласти Цикл
		
		НомерСтроки = ВыделОбласть.Верх;
		НомерКолонки = ВыделОбласть.Лево;
		
		ОбластьСтрока = Макет.Область("R"+Формат(НомерСтроки,"ЧГ="));		
		Если ОбластьСтрока.Имя = ВыделОбласть.Имя Тогда
			//ОЧИСТКА СТРОКИ 
			ОбластьСтрока.Имя = "";
			
			//Почистить всё остальное 		
			Для ИтераторX = 1 По Макет.ШиринаТаблицы Цикл
				ОбластьОчистки = Макет.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C" + Формат(ИтераторX,"ЧГ="));
				
				ОбластьОчистки.ЦветФона = Новый Цвет();
				
				ОбластьОчистки.Имя = "";
				Попытка
					ОбластьОчистки.Текст = "";	
				Исключение
				КонецПопытки; 			
			КонецЦикла; 			
			
			Продолжить;
		КонецЕсли; 
		
		ОбластьКолонка = Макет.Область("C"+Формат(НомерКолонки,"ЧГ="));	
		Если ОбластьКолонка.Имя = ВыделОбласть.Имя Тогда
			//ОЧИСТКА КОЛОНКИ 
			
			ОбластьКолонка.Имя = "";
			
			//Почистить всё остальное 		
			Для ИтераторY = 1 По Макет.ВысотаТаблицы Цикл
				ОбластьОчистки = Макет.Область("R"+Формат(ИтераторY,"ЧГ=")+"C" + Формат(НомерКолонки,"ЧГ="));
				
				ОбластьОчистки.ЦветФона = Новый Цвет();
				
				ОбластьОчистки.Имя = "";
				Попытка
					ОбластьОчистки.Текст = "";	
				Исключение
				КонецПопытки; 			
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		
		////Очистка выделенной области 
		Для ИтераторX = ВыделОбласть.Лево По ВыделОбласть.Право Цикл
			
			Для ИтераторY = ВыделОбласть.Верх По ВыделОбласть.Низ Цикл
				
				ОбластьОчистки = Макет.Область("R"+Формат(ИтераторY,"ЧГ=")+"C" + Формат(ИтераторX,"ЧГ="));
				
				ОбластьОчистки.ЦветФона = Новый Цвет();
				
				ОбластьОчистки.Имя = "";
				Попытка
					ОбластьОчистки.Текст = "";	
				Исключение
				КонецПопытки; 		
			КонецЦикла; 
		КонецЦикла; 			
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьМенюРеквизитовИмпорта(Команда)
	//Управление видимостью настроек
	
	Если Элементы.ГруппаМенюПоказателей.Видимость Тогда
		//Элементы.ПоказатьСкрытьМенюРеквизитовИмпорта.Заголовок = "Показать поля импорта";
	    Элементы.ГруппаМенюПоказателей.Видимость = Ложь;
		Элементы.ОбновитьТаблицуРеквизитов.Видимость = Ложь;
	Иначе
		//Элементы.ПоказатьСкрытьМенюРеквизитовИмпорта.Заголовок = "Скрыть поля импорта";
		Элементы.ГруппаМенюПоказателей.Видимость = Истина;
		Элементы.ОбновитьТаблицуРеквизитов.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуДобавленияПодсказки(Команда)
	Элементы.УстановитьПометкуДобавленияПодсказки.Пометка = НЕ Элементы.УстановитьПометкуДобавленияПодсказки.Пометка;
	
	Если Элементы.УстановитьПометкуДобавленияПодсказки.Пометка Тогда
		Элементы.УстановитьПометкуДобавленияПодсказки.ЦветРамки = WebЦвета.ТемноСиний;
	Иначе
		Элементы.УстановитьПометкуДобавленияПодсказки.ЦветРамки = Новый Цвет();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
//Конец//
////////////ПанельУправленияМакетом 


////////////ОстальныеСобытия
//Начало//
#Область ОстальныеСобытия

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ОбновитьДеревоАналитикИПоказателей();
	Макет.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Видимость командной панели 
	
	//Если ТекущаяСтраница = Элементы.ГруппаМакет Тогда
	//	Элементы.ГруппаУправлениеМакетом.Видимость = Истина;	
	//Иначе
	//	Элементы.ГруппаУправлениеМакетом.Видимость = Ложь;
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыИмпортаСтрокСтрокаЭДПриИзменении(Элемент)
	//Не создавать дубли 	
	ТекДанные = Элементы.ПараметрыИмпортаСтрок.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	         
	МассивПоиска = Объект.ПараметрыИмпортаСтрок.НайтиСтроки(Новый Структура("СтрокаЭД", ТекДанные.СтрокаЭД));	
	Если МассивПоиска.Количество() > 1  Тогда
		
		ТекстСообщения = 
		"Строка """ + Строка(ТекДанные.СтрокаЭД) + """уже располагается на уровне №" + МассивПоиска[0].НомерСтроки;
		
		ЭД_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекДанные.СтрокаЭД = Неопределено;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
//Конец//
////////////ОстальныеСобытия 


#КонецОбласти
//Конец//
////////////СобытияФормыКлиент 



 